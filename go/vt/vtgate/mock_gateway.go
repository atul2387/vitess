// Code generated by MockGen. DO NOT EDIT.
// Source: gateway.go

// Package vtgate is a generated GoMock package.
package vtgate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	sqltypes "vitess.io/vitess/go/sqltypes"
	discovery "vitess.io/vitess/go/vt/discovery"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
	query "vitess.io/vitess/go/vt/proto/query"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	queryservice "vitess.io/vitess/go/vt/vttablet/queryservice"
)

// MockGateway is a mock of Gateway interface.
type MockGateway struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayMockRecorder
}

// MockGatewayMockRecorder is the mock recorder for MockGateway.
type MockGatewayMockRecorder struct {
	mock *MockGateway
}

// NewMockGateway creates a new mock instance.
func NewMockGateway(ctrl *gomock.Controller) *MockGateway {
	mock := &MockGateway{ctrl: ctrl}
	mock.recorder = &MockGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGateway) EXPECT() *MockGatewayMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockGateway) Begin(ctx context.Context, target *query.Target, options *query.ExecuteOptions) (int64, *topodata.TabletAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, target, options)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*topodata.TabletAlias)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Begin indicates an expected call of Begin.
func (mr *MockGatewayMockRecorder) Begin(ctx, target, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockGateway)(nil).Begin), ctx, target, options)
}

// BeginExecute mocks base method.
func (m *MockGateway) BeginExecute(ctx context.Context, target *query.Target, preQueries []string, sql string, bindVariables map[string]*query.BindVariable, reservedID int64, options *query.ExecuteOptions) (*sqltypes.Result, int64, *topodata.TabletAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginExecute", ctx, target, preQueries, sql, bindVariables, reservedID, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*topodata.TabletAlias)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BeginExecute indicates an expected call of BeginExecute.
func (mr *MockGatewayMockRecorder) BeginExecute(ctx, target, preQueries, sql, bindVariables, reservedID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginExecute", reflect.TypeOf((*MockGateway)(nil).BeginExecute), ctx, target, preQueries, sql, bindVariables, reservedID, options)
}

// BeginExecuteBatch mocks base method.
func (m *MockGateway) BeginExecuteBatch(ctx context.Context, target *query.Target, queries []*query.BoundQuery, asTransaction bool, options *query.ExecuteOptions) ([]sqltypes.Result, int64, *topodata.TabletAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginExecuteBatch", ctx, target, queries, asTransaction, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*topodata.TabletAlias)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// BeginExecuteBatch indicates an expected call of BeginExecuteBatch.
func (mr *MockGatewayMockRecorder) BeginExecuteBatch(ctx, target, queries, asTransaction, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginExecuteBatch", reflect.TypeOf((*MockGateway)(nil).BeginExecuteBatch), ctx, target, queries, asTransaction, options)
}

// CacheStatus mocks base method.
func (m *MockGateway) CacheStatus() TabletCacheStatusList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheStatus")
	ret0, _ := ret[0].(TabletCacheStatusList)
	return ret0
}

// CacheStatus indicates an expected call of CacheStatus.
func (mr *MockGatewayMockRecorder) CacheStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheStatus", reflect.TypeOf((*MockGateway)(nil).CacheStatus))
}

// Close mocks base method.
func (m *MockGateway) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGatewayMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGateway)(nil).Close), ctx)
}

// Commit mocks base method.
func (m *MockGateway) Commit(ctx context.Context, target *query.Target, transactionID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, target, transactionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockGatewayMockRecorder) Commit(ctx, target, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGateway)(nil).Commit), ctx, target, transactionID)
}

// CommitPrepared mocks base method.
func (m *MockGateway) CommitPrepared(ctx context.Context, target *query.Target, dtid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitPrepared", ctx, target, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitPrepared indicates an expected call of CommitPrepared.
func (mr *MockGatewayMockRecorder) CommitPrepared(ctx, target, dtid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitPrepared", reflect.TypeOf((*MockGateway)(nil).CommitPrepared), ctx, target, dtid)
}

// ConcludeTransaction mocks base method.
func (m *MockGateway) ConcludeTransaction(ctx context.Context, target *query.Target, dtid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConcludeTransaction", ctx, target, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConcludeTransaction indicates an expected call of ConcludeTransaction.
func (mr *MockGatewayMockRecorder) ConcludeTransaction(ctx, target, dtid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConcludeTransaction", reflect.TypeOf((*MockGateway)(nil).ConcludeTransaction), ctx, target, dtid)
}

// CreateTransaction mocks base method.
func (m *MockGateway) CreateTransaction(ctx context.Context, target *query.Target, dtid string, participants []*query.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, target, dtid, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockGatewayMockRecorder) CreateTransaction(ctx, target, dtid, participants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockGateway)(nil).CreateTransaction), ctx, target, dtid, participants)
}

// Execute mocks base method.
func (m *MockGateway) Execute(ctx context.Context, target *query.Target, sql string, bindVariables map[string]*query.BindVariable, transactionID, reservedID int64, options *query.ExecuteOptions) (*sqltypes.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, target, sql, bindVariables, transactionID, reservedID, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGatewayMockRecorder) Execute(ctx, target, sql, bindVariables, transactionID, reservedID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGateway)(nil).Execute), ctx, target, sql, bindVariables, transactionID, reservedID, options)
}

// ExecuteBatch mocks base method.
func (m *MockGateway) ExecuteBatch(ctx context.Context, target *query.Target, queries []*query.BoundQuery, asTransaction bool, transactionID int64, options *query.ExecuteOptions) ([]sqltypes.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBatch", ctx, target, queries, asTransaction, transactionID, options)
	ret0, _ := ret[0].([]sqltypes.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBatch indicates an expected call of ExecuteBatch.
func (mr *MockGatewayMockRecorder) ExecuteBatch(ctx, target, queries, asTransaction, transactionID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatch", reflect.TypeOf((*MockGateway)(nil).ExecuteBatch), ctx, target, queries, asTransaction, transactionID, options)
}

// HandlePanic mocks base method.
func (m *MockGateway) HandlePanic(err *error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePanic", err)
}

// HandlePanic indicates an expected call of HandlePanic.
func (mr *MockGatewayMockRecorder) HandlePanic(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePanic", reflect.TypeOf((*MockGateway)(nil).HandlePanic), err)
}

// MessageAck mocks base method.
func (m *MockGateway) MessageAck(ctx context.Context, target *query.Target, name string, ids []*query.Value) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAck", ctx, target, name, ids)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageAck indicates an expected call of MessageAck.
func (mr *MockGatewayMockRecorder) MessageAck(ctx, target, name, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAck", reflect.TypeOf((*MockGateway)(nil).MessageAck), ctx, target, name, ids)
}

// MessageStream mocks base method.
func (m *MockGateway) MessageStream(ctx context.Context, target *query.Target, name string, callback func(*sqltypes.Result) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageStream", ctx, target, name, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageStream indicates an expected call of MessageStream.
func (mr *MockGatewayMockRecorder) MessageStream(ctx, target, name, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageStream", reflect.TypeOf((*MockGateway)(nil).MessageStream), ctx, target, name, callback)
}

// Prepare mocks base method.
func (m *MockGateway) Prepare(ctx context.Context, target *query.Target, transactionID int64, dtid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, target, transactionID, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockGatewayMockRecorder) Prepare(ctx, target, transactionID, dtid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockGateway)(nil).Prepare), ctx, target, transactionID, dtid)
}

// QueryServiceByAlias mocks base method.
func (m *MockGateway) QueryServiceByAlias(alias *topodata.TabletAlias) (queryservice.QueryService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryServiceByAlias", alias)
	ret0, _ := ret[0].(queryservice.QueryService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryServiceByAlias indicates an expected call of QueryServiceByAlias.
func (mr *MockGatewayMockRecorder) QueryServiceByAlias(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryServiceByAlias", reflect.TypeOf((*MockGateway)(nil).QueryServiceByAlias), alias)
}

// ReadTransaction mocks base method.
func (m *MockGateway) ReadTransaction(ctx context.Context, target *query.Target, dtid string) (*query.TransactionMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTransaction", ctx, target, dtid)
	ret0, _ := ret[0].(*query.TransactionMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTransaction indicates an expected call of ReadTransaction.
func (mr *MockGatewayMockRecorder) ReadTransaction(ctx, target, dtid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTransaction", reflect.TypeOf((*MockGateway)(nil).ReadTransaction), ctx, target, dtid)
}

// RegisterStats mocks base method.
func (m *MockGateway) RegisterStats() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterStats")
}

// RegisterStats indicates an expected call of RegisterStats.
func (mr *MockGatewayMockRecorder) RegisterStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStats", reflect.TypeOf((*MockGateway)(nil).RegisterStats))
}

// Release mocks base method.
func (m *MockGateway) Release(ctx context.Context, target *query.Target, transactionID, reservedID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, target, transactionID, reservedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockGatewayMockRecorder) Release(ctx, target, transactionID, reservedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockGateway)(nil).Release), ctx, target, transactionID, reservedID)
}

// ReserveBeginExecute mocks base method.
func (m *MockGateway) ReserveBeginExecute(ctx context.Context, target *query.Target, preQueries []string, sql string, bindVariables map[string]*query.BindVariable, options *query.ExecuteOptions) (*sqltypes.Result, int64, int64, *topodata.TabletAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveBeginExecute", ctx, target, preQueries, sql, bindVariables, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(*topodata.TabletAlias)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ReserveBeginExecute indicates an expected call of ReserveBeginExecute.
func (mr *MockGatewayMockRecorder) ReserveBeginExecute(ctx, target, preQueries, sql, bindVariables, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveBeginExecute", reflect.TypeOf((*MockGateway)(nil).ReserveBeginExecute), ctx, target, preQueries, sql, bindVariables, options)
}

// ReserveExecute mocks base method.
func (m *MockGateway) ReserveExecute(ctx context.Context, target *query.Target, preQueries []string, sql string, bindVariables map[string]*query.BindVariable, transactionID int64, options *query.ExecuteOptions) (*sqltypes.Result, int64, *topodata.TabletAlias, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveExecute", ctx, target, preQueries, sql, bindVariables, transactionID, options)
	ret0, _ := ret[0].(*sqltypes.Result)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*topodata.TabletAlias)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ReserveExecute indicates an expected call of ReserveExecute.
func (mr *MockGatewayMockRecorder) ReserveExecute(ctx, target, preQueries, sql, bindVariables, transactionID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveExecute", reflect.TypeOf((*MockGateway)(nil).ReserveExecute), ctx, target, preQueries, sql, bindVariables, transactionID, options)
}

// Rollback mocks base method.
func (m *MockGateway) Rollback(ctx context.Context, target *query.Target, transactionID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, target, transactionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockGatewayMockRecorder) Rollback(ctx, target, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockGateway)(nil).Rollback), ctx, target, transactionID)
}

// RollbackPrepared mocks base method.
func (m *MockGateway) RollbackPrepared(ctx context.Context, target *query.Target, dtid string, originalID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackPrepared", ctx, target, dtid, originalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackPrepared indicates an expected call of RollbackPrepared.
func (mr *MockGatewayMockRecorder) RollbackPrepared(ctx, target, dtid, originalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackPrepared", reflect.TypeOf((*MockGateway)(nil).RollbackPrepared), ctx, target, dtid, originalID)
}

// SetRollback mocks base method.
func (m *MockGateway) SetRollback(ctx context.Context, target *query.Target, dtid string, transactionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRollback", ctx, target, dtid, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRollback indicates an expected call of SetRollback.
func (mr *MockGatewayMockRecorder) SetRollback(ctx, target, dtid, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRollback", reflect.TypeOf((*MockGateway)(nil).SetRollback), ctx, target, dtid, transactionID)
}

// StartCommit mocks base method.
func (m *MockGateway) StartCommit(ctx context.Context, target *query.Target, transactionID int64, dtid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCommit", ctx, target, transactionID, dtid)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCommit indicates an expected call of StartCommit.
func (mr *MockGatewayMockRecorder) StartCommit(ctx, target, transactionID, dtid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCommit", reflect.TypeOf((*MockGateway)(nil).StartCommit), ctx, target, transactionID, dtid)
}

// StreamExecute mocks base method.
func (m *MockGateway) StreamExecute(ctx context.Context, target *query.Target, sql string, bindVariables map[string]*query.BindVariable, transactionID int64, options *query.ExecuteOptions, callback func(*sqltypes.Result) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecute", ctx, target, sql, bindVariables, transactionID, options, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamExecute indicates an expected call of StreamExecute.
func (mr *MockGatewayMockRecorder) StreamExecute(ctx, target, sql, bindVariables, transactionID, options, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecute", reflect.TypeOf((*MockGateway)(nil).StreamExecute), ctx, target, sql, bindVariables, transactionID, options, callback)
}

// StreamHealth mocks base method.
func (m *MockGateway) StreamHealth(ctx context.Context, callback func(*query.StreamHealthResponse) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamHealth", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamHealth indicates an expected call of StreamHealth.
func (mr *MockGatewayMockRecorder) StreamHealth(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamHealth", reflect.TypeOf((*MockGateway)(nil).StreamHealth), ctx, callback)
}

// TabletsCacheStatus mocks base method.
func (m *MockGateway) TabletsCacheStatus() discovery.TabletsCacheStatusList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TabletsCacheStatus")
	ret0, _ := ret[0].(discovery.TabletsCacheStatusList)
	return ret0
}

// TabletsCacheStatus indicates an expected call of TabletsCacheStatus.
func (mr *MockGatewayMockRecorder) TabletsCacheStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TabletsCacheStatus", reflect.TypeOf((*MockGateway)(nil).TabletsCacheStatus))
}

// VStream mocks base method.
func (m *MockGateway) VStream(ctx context.Context, target *query.Target, startPos string, tableLastPKs []*binlogdata.TableLastPK, filter *binlogdata.Filter, send func([]*binlogdata.VEvent) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VStream", ctx, target, startPos, tableLastPKs, filter, send)
	ret0, _ := ret[0].(error)
	return ret0
}

// VStream indicates an expected call of VStream.
func (mr *MockGatewayMockRecorder) VStream(ctx, target, startPos, tableLastPKs, filter, send interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VStream", reflect.TypeOf((*MockGateway)(nil).VStream), ctx, target, startPos, tableLastPKs, filter, send)
}

// VStreamResults mocks base method.
func (m *MockGateway) VStreamResults(ctx context.Context, target *query.Target, query string, send func(*binlogdata.VStreamResultsResponse) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VStreamResults", ctx, target, query, send)
	ret0, _ := ret[0].(error)
	return ret0
}

// VStreamResults indicates an expected call of VStreamResults.
func (mr *MockGatewayMockRecorder) VStreamResults(ctx, target, query, send interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VStreamResults", reflect.TypeOf((*MockGateway)(nil).VStreamResults), ctx, target, query, send)
}

// VStreamRows mocks base method.
func (m *MockGateway) VStreamRows(ctx context.Context, target *query.Target, query string, lastpk *query.QueryResult, send func(*binlogdata.VStreamRowsResponse) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VStreamRows", ctx, target, query, lastpk, send)
	ret0, _ := ret[0].(error)
	return ret0
}

// VStreamRows indicates an expected call of VStreamRows.
func (mr *MockGatewayMockRecorder) VStreamRows(ctx, target, query, lastpk, send interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VStreamRows", reflect.TypeOf((*MockGateway)(nil).VStreamRows), ctx, target, query, lastpk, send)
}

// WaitForTablets mocks base method.
func (m *MockGateway) WaitForTablets(ctx context.Context, tabletTypesToWait []topodata.TabletType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTablets", ctx, tabletTypesToWait)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForTablets indicates an expected call of WaitForTablets.
func (mr *MockGatewayMockRecorder) WaitForTablets(ctx, tabletTypesToWait interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTablets", reflect.TypeOf((*MockGateway)(nil).WaitForTablets), ctx, tabletTypesToWait)
}
