// Code generated by MockGen. DO NOT EDIT.
// Source: vitess.io/vitess/go/vt/vtgate/vtgateconn (interfaces: Impl)

// Package vtgateconn is a generated GoMock package.
package vtgateconn

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sqltypes "vitess.io/vitess/go/sqltypes"
	binlogdata "vitess.io/vitess/go/vt/proto/binlogdata"
	query "vitess.io/vitess/go/vt/proto/query"
	topodata "vitess.io/vitess/go/vt/proto/topodata"
	vtgate "vitess.io/vitess/go/vt/proto/vtgate"
)

// MockImpl is a mock of Impl interface
type MockImpl struct {
	ctrl     *gomock.Controller
	recorder *MockImplMockRecorder
}

// MockImplMockRecorder is the mock recorder for MockImpl
type MockImplMockRecorder struct {
	mock *MockImpl
}

// NewMockImpl creates a new mock instance
func NewMockImpl(ctrl *gomock.Controller) *MockImpl {
	mock := &MockImpl{ctrl: ctrl}
	mock.recorder = &MockImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImpl) EXPECT() *MockImplMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockImpl) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockImplMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockImpl)(nil).Close))
}

// Execute mocks base method
func (m *MockImpl) Execute(arg0 context.Context, arg1 *vtgate.Session, arg2 string, arg3 map[string]*query.BindVariable) (*vtgate.Session, *sqltypes.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*vtgate.Session)
	ret1, _ := ret[1].(*sqltypes.Result)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockImplMockRecorder) Execute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockImpl)(nil).Execute), arg0, arg1, arg2, arg3)
}

// ExecuteBatch mocks base method
func (m *MockImpl) ExecuteBatch(arg0 context.Context, arg1 *vtgate.Session, arg2 []string, arg3 []map[string]*query.BindVariable) (*vtgate.Session, []sqltypes.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*vtgate.Session)
	ret1, _ := ret[1].([]sqltypes.QueryResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteBatch indicates an expected call of ExecuteBatch
func (mr *MockImplMockRecorder) ExecuteBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBatch", reflect.TypeOf((*MockImpl)(nil).ExecuteBatch), arg0, arg1, arg2, arg3)
}

// ResolveTransaction mocks base method
func (m *MockImpl) ResolveTransaction(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveTransaction indicates an expected call of ResolveTransaction
func (mr *MockImplMockRecorder) ResolveTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTransaction", reflect.TypeOf((*MockImpl)(nil).ResolveTransaction), arg0, arg1)
}

// StreamExecute mocks base method
func (m *MockImpl) StreamExecute(arg0 context.Context, arg1 *vtgate.Session, arg2 string, arg3 map[string]*query.BindVariable) (sqltypes.ResultStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamExecute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(sqltypes.ResultStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamExecute indicates an expected call of StreamExecute
func (mr *MockImplMockRecorder) StreamExecute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamExecute", reflect.TypeOf((*MockImpl)(nil).StreamExecute), arg0, arg1, arg2, arg3)
}

// VStream mocks base method
func (m *MockImpl) VStream(arg0 context.Context, arg1 topodata.TabletType, arg2 *binlogdata.VGtid, arg3 *binlogdata.Filter) (VStreamReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VStream", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(VStreamReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VStream indicates an expected call of VStream
func (mr *MockImplMockRecorder) VStream(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VStream", reflect.TypeOf((*MockImpl)(nil).VStream), arg0, arg1, arg2, arg3)
}
