// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const KEYSPACES = 57565
const VITESS_KEYSPACES = 57566
const VITESS_SHARDS = 57567
const VITESS_TABLETS = 57568
const NAMES = 57569
const CHARSET = 57570
const GLOBAL = 57571
const SESSION = 57572
const ISOLATION = 57573
const LEVEL = 57574
const READ = 57575
const WRITE = 57576
const ONLY = 57577
const REPEATABLE = 57578
const COMMITTED = 57579
const UNCOMMITTED = 57580
const SERIALIZABLE = 57581
const CURRENT_TIMESTAMP = 57582
const DATABASE = 57583
const CURRENT_DATE = 57584
const CURRENT_TIME = 57585
const LOCALTIME = 57586
const LOCALTIMESTAMP = 57587
const UTC_DATE = 57588
const UTC_TIME = 57589
const UTC_TIMESTAMP = 57590
const REPLACE = 57591
const CONVERT = 57592
const CAST = 57593
const SUBSTR = 57594
const SUBSTRING = 57595
const GROUP_CONCAT = 57596
const SEPARATOR = 57597
const TIMESTAMPADD = 57598
const TIMESTAMPDIFF = 57599
const MATCH = 57600
const AGAINST = 57601
const BOOLEAN = 57602
const LANGUAGE = 57603
const WITH = 57604
const QUERY = 57605
const EXPANSION = 57606
const UNUSED = 57607
const ARRAY = 57608
const CUME_DIST = 57609
const DESCRIPTION = 57610
const DENSE_RANK = 57611
const EMPTY = 57612
const EXCEPT = 57613
const FIRST_VALUE = 57614
const GROUPING = 57615
const GROUPS = 57616
const JSON_TABLE = 57617
const LAG = 57618
const LAST_VALUE = 57619
const LATERAL = 57620
const LEAD = 57621
const MEMBER = 57622
const NTH_VALUE = 57623
const NTILE = 57624
const OF = 57625
const OVER = 57626
const PERCENT_RANK = 57627
const RANK = 57628
const RECURSIVE = 57629
const ROW_NUMBER = 57630
const SYSTEM = 57631
const WINDOW = 57632
const ACTIVE = 57633
const ADMIN = 57634
const BUCKETS = 57635
const CLONE = 57636
const COMPONENT = 57637
const DEFINITION = 57638
const ENFORCED = 57639
const EXCLUDE = 57640
const FOLLOWING = 57641
const GEOMCOLLECTION = 57642
const GET_MASTER_PUBLIC_KEY = 57643
const HISTOGRAM = 57644
const HISTORY = 57645
const INACTIVE = 57646
const INVISIBLE = 57647
const LOCKED = 57648
const MASTER_COMPRESSION_ALGORITHMS = 57649
const MASTER_PUBLIC_KEY_PATH = 57650
const MASTER_TLS_CIPHERSUITES = 57651
const MASTER_ZSTD_COMPRESSION_LEVEL = 57652
const NESTED = 57653
const NETWORK_NAMESPACE = 57654
const NOWAIT = 57655
const NULLS = 57656
const OJ = 57657
const OLD = 57658
const OPTIONAL = 57659
const ORDINALITY = 57660
const ORGANIZATION = 57661
const OTHERS = 57662
const PATH = 57663
const PERSIST = 57664
const PERSIST_ONLY = 57665
const PRECEDING = 57666
const PRIVILEGE_CHECKS_USER = 57667
const PROCESS = 57668
const RANDOM = 57669
const REFERENCE = 57670
const REQUIRE_ROW_FORMAT = 57671
const RESOURCE = 57672
const RESPECT = 57673
const RESTART = 57674
const RETAIN = 57675
const REUSE = 57676
const ROLE = 57677
const SECONDARY = 57678
const SECONDARY_ENGINE = 57679
const SECONDARY_LOAD = 57680
const SECONDARY_UNLOAD = 57681
const SKIP = 57682
const SRID = 57683
const THREAD_PRIORITY = 57684
const TIES = 57685
const UNBOUNDED = 57686
const VCPU = 57687
const VISIBLE = 57688
const FORMAT = 57689
const TREE = 57690
const VITESS = 57691
const TRADITIONAL = 57692

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	33, 310,
	132, 310,
	144, 310,
	169, 324,
	170, 324,
	-2, 312,
	-1, 47,
	134, 334,
	-2, 332,
	-1, 70,
	38, 370,
	-2, 378,
	-1, 397,
	120, 701,
	-2, 697,
	-1, 398,
	120, 702,
	-2, 698,
	-1, 412,
	38, 371,
	-2, 383,
	-1, 413,
	38, 372,
	-2, 384,
	-1, 436,
	88, 956,
	-2, 72,
	-1, 437,
	88, 871,
	-2, 73,
	-1, 442,
	88, 838,
	-2, 663,
	-1, 444,
	88, 903,
	-2, 665,
	-1, 768,
	56, 54,
	58, 54,
	-2, 58,
	-1, 945,
	120, 704,
	-2, 700,
	-1, 1372,
	5, 622,
	17, 622,
	19, 622,
	31, 622,
	59, 622,
	-2, 409,
}

const yyPrivate = 57344

const yyLast = 17950

var yyAct = [...]int{

	397, 1611, 1568, 1411, 1601, 1299, 1517, 1471, 1352, 356,
	1204, 1050, 341, 1484, 1385, 1224, 1023, 616, 1205, 405,
	1046, 1250, 1059, 1349, 1353, 735, 597, 370, 696, 69,
	3, 1079, 1049, 1093, 1358, 1318, 441, 89, 932, 1143,
	1364, 287, 1192, 310, 287, 867, 1267, 1063, 1276, 89,
	939, 287, 781, 1009, 887, 614, 1025, 414, 742, 761,
	745, 740, 909, 965, 343, 1020, 27, 399, 1089, 65,
	566, 606, 1002, 780, 770, 339, 287, 89, 427, 70,
	567, 287, 895, 287, 327, 332, 67, 430, 435, 709,
	752, 64, 7, 6, 438, 5, 710, 1604, 586, 1588,
	767, 1599, 1576, 762, 1596, 1412, 1587, 1575, 1335, 1441,
	72, 73, 74, 75, 76, 571, 283, 279, 280, 281,
	1073, 1112, 382, 1379, 388, 389, 386, 387, 385, 384,
	383, 275, 400, 420, 273, 1111, 277, 328, 390, 391,
	331, 285, 91, 92, 93, 1380, 1381, 1238, 1040, 629,
	1237, 323, 29, 1239, 58, 32, 33, 1041, 1042, 782,
	330, 783, 329, 1258, 336, 624, 91, 92, 93, 625,
	622, 623, 1072, 1301, 942, 1474, 429, 1110, 91, 92,
	93, 568, 1319, 570, 1080, 1432, 1543, 658, 657, 667,
	668, 660, 661, 662, 663, 664, 665, 666, 659, 970,
	1430, 669, 320, 57, 894, 322, 318, 627, 856, 617,
	618, 628, 1303, 603, 855, 605, 853, 1598, 1569, 1595,
	1298, 1003, 1561, 1321, 1064, 1619, 612, 1518, 587, 1302,
	1107, 1104, 1105, 276, 1103, 896, 897, 898, 1225, 1227,
	573, 1615, 1520, 277, 282, 1304, 1295, 602, 604, 857,
	854, 860, 1297, 632, 1526, 844, 1375, 1066, 1374, 274,
	1323, 1373, 1327, 569, 1322, 583, 1320, 1114, 1117, 408,
	576, 1325, 290, 278, 287, 578, 579, 681, 682, 287,
	1324, 588, 1066, 1124, 1162, 287, 1123, 1550, 1454, 1159,
	1234, 287, 595, 1326, 1328, 601, 1197, 1172, 1151, 776,
	756, 694, 89, 593, 89, 659, 1036, 1109, 669, 1047,
	669, 89, 916, 1519, 91, 92, 93, 888, 982, 1080,
	1226, 607, 649, 89, 89, 611, 914, 915, 913, 1108,
	966, 1559, 1574, 580, 882, 581, 630, 613, 582, 79,
	600, 658, 657, 667, 668, 660, 661, 662, 663, 664,
	665, 666, 659, 1535, 638, 669, 1296, 1613, 1294, 619,
	1614, 1065, 1612, 1527, 1525, 1362, 631, 1544, 608, 609,
	91, 92, 93, 1113, 577, 647, 648, 646, 80, 585,
	589, 590, 591, 1339, 599, 592, 1065, 784, 1115, 642,
	1337, 594, 846, 649, 681, 682, 1564, 1256, 1144, 681,
	682, 749, 572, 679, 889, 662, 663, 664, 665, 666,
	659, 1579, 59, 669, 643, 644, 646, 641, 639, 1480,
	640, 883, 1286, 89, 1398, 287, 287, 287, 966, 1479,
	1169, 733, 649, 1271, 89, 91, 92, 93, 697, 1270,
	89, 667, 668, 660, 661, 662, 663, 664, 665, 666,
	659, 438, 1620, 669, 1282, 1283, 1284, 1259, 732, 660,
	661, 662, 663, 664, 665, 666, 659, 1581, 598, 669,
	1560, 565, 746, 712, 714, 716, 718, 720, 722, 723,
	713, 715, 734, 719, 721, 1157, 724, 1156, 574, 575,
	1069, 760, 904, 906, 907, 1497, 1621, 1070, 1477, 905,
	1268, 880, 1444, 774, 872, 769, 647, 648, 646, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 648,
	646, 409, 779, 1532, 649, 759, 1285, 768, 1066, 1523,
	1597, 1290, 1287, 1278, 1288, 1281, 649, 1277, 647, 648,
	646, 1279, 1280, 658, 657, 667, 668, 660, 661, 662,
	663, 664, 665, 666, 659, 1289, 649, 669, 1531, 1361,
	91, 92, 93, 1136, 1137, 1138, 287, 1583, 409, 57,
	842, 89, 1394, 845, 1067, 847, 287, 287, 89, 89,
	89, 912, 1523, 1572, 287, 984, 744, 287, 987, 988,
	287, 865, 866, 272, 287, 1030, 89, 771, 1158, 1523,
	409, 89, 89, 89, 287, 89, 89, 657, 667, 668,
	660, 661, 662, 663, 664, 665, 666, 659, 89, 89,
	669, 1523, 1551, 871, 66, 983, 843, 1523, 1522, 1193,
	869, 1450, 1065, 850, 851, 852, 1350, 1062, 1060, 1361,
	1061, 647, 648, 646, 647, 648, 646, 1058, 1064, 1469,
	1468, 870, 645, 647, 648, 646, 874, 875, 876, 649,
	878, 879, 649, 1456, 409, 861, 792, 424, 425, 1005,
	933, 649, 1193, 884, 885, 1006, 848, 849, 409, 935,
	910, 91, 92, 93, 858, 934, 68, 429, 1453, 409,
	864, 1404, 1403, 89, 91, 92, 93, 1006, 1241, 891,
	91, 92, 93, 772, 877, 1400, 1401, 1400, 1399, 995,
	409, 1534, 943, 1006, 409, 954, 957, 911, 1361, 29,
	1402, 967, 645, 409, 791, 790, 89, 89, 1006, 995,
	29, 945, 359, 358, 361, 362, 363, 364, 772, 996,
	944, 360, 365, 1199, 89, 1242, 1039, 697, 773, 1200,
	775, 287, 979, 1175, 89, 1174, 949, 936, 937, 287,
	1504, 402, 989, 995, 771, 946, 398, 287, 287, 985,
	57, 287, 287, 859, 943, 287, 287, 287, 89, 975,
	976, 57, 57, 773, 777, 771, 995, 1589, 1486, 1074,
	1461, 89, 567, 945, 1094, 438, 1021, 1390, 1365, 1366,
	1606, 1245, 1001, 90, 997, 1090, 1085, 288, 1051, 1084,
	288, 1602, 57, 869, 1300, 90, 908, 288, 29, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 1487, 1097, 1031, 1081, 1082, 1083,
	1033, 1029, 288, 90, 999, 287, 89, 288, 89, 288,
	1116, 998, 1038, 1392, 287, 287, 287, 287, 287, 1004,
	287, 287, 1054, 1034, 287, 89, 1037, 1371, 1368, 57,
	1350, 1272, 1032, 950, 951, 1095, 971, 956, 959, 960,
	892, 863, 287, 1216, 1370, 1213, 1214, 287, 1217, 287,
	287, 1215, 1212, 287, 89, 947, 948, 1218, 1593, 1015,
	1016, 1099, 974, 1101, 1586, 977, 978, 1091, 1092, 1011,
	1014, 1015, 1016, 1012, 1131, 1013, 1017, 1343, 1182, 743,
	1128, 1075, 1076, 1077, 1078, 1011, 1014, 1015, 1016, 1012,
	1591, 1013, 1017, 980, 1191, 1365, 1366, 1086, 1087, 1088,
	1190, 910, 1263, 789, 596, 1098, 1255, 1566, 962, 415,
	1565, 1502, 1253, 736, 1118, 1119, 1120, 1121, 1122, 1247,
	1125, 1126, 963, 416, 1127, 737, 1448, 415, 1482, 1153,
	747, 748, 418, 1100, 417, 862, 1139, 1019, 911, 403,
	404, 416, 1129, 1189, 406, 1447, 407, 1130, 412, 413,
	418, 1188, 417, 1134, 68, 1446, 1346, 287, 1193, 626,
	1608, 1607, 402, 1163, 1160, 1181, 886, 287, 287, 287,
	287, 287, 750, 400, 1152, 1186, 1608, 1548, 1206, 287,
	1475, 981, 66, 287, 71, 63, 1, 287, 1168, 309,
	1600, 287, 1201, 1413, 1483, 1106, 1567, 1516, 1384, 1057,
	288, 1048, 78, 564, 77, 288, 1558, 1185, 1240, 881,
	89, 288, 1223, 610, 1056, 1196, 1194, 288, 1055, 1246,
	1524, 1243, 1195, 1251, 1251, 1473, 1207, 1051, 90, 1210,
	90, 1219, 1230, 1068, 1232, 1257, 1233, 90, 1071, 1140,
	1141, 1142, 1391, 1229, 1254, 1252, 1563, 797, 795, 90,
	90, 796, 1235, 794, 799, 798, 1231, 793, 89, 89,
	1262, 302, 1264, 1265, 1266, 433, 893, 1260, 1261, 1248,
	1249, 1208, 1209, 319, 1211, 1148, 1149, 1018, 785, 1096,
	751, 81, 1293, 1292, 1102, 299, 620, 621, 89, 304,
	677, 1187, 1269, 1236, 439, 1146, 1166, 432, 1356, 1147,
	986, 739, 1445, 1345, 1167, 706, 964, 765, 342, 903,
	1154, 1155, 89, 1291, 1274, 357, 1161, 354, 933, 1164,
	1165, 355, 990, 1198, 651, 340, 334, 1171, 764, 1315,
	757, 1173, 1010, 1008, 1176, 1177, 1178, 1179, 1180, 1317,
	1308, 1007, 428, 1305, 1306, 1307, 1367, 1275, 287, 90,
	1340, 288, 288, 288, 1330, 1363, 1329, 763, 89, 994,
	90, 1314, 411, 89, 89, 1440, 90, 1542, 410, 945,
	1351, 1316, 1206, 961, 50, 1315, 634, 324, 944, 31,
	1221, 1222, 419, 22, 21, 1336, 20, 19, 1354, 89,
	658, 657, 667, 668, 660, 661, 662, 663, 664, 665,
	666, 659, 18, 89, 669, 89, 89, 1360, 24, 1251,
	1251, 1369, 17, 16, 15, 584, 1383, 35, 26, 25,
	1051, 14, 1051, 1376, 1397, 13, 12, 11, 10, 1387,
	1388, 1389, 409, 287, 1378, 1382, 9, 8, 4, 637,
	23, 1395, 1396, 695, 2, 0, 0, 0, 1344, 1377,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 89,
	0, 1414, 89, 89, 89, 287, 0, 0, 0, 1310,
	1311, 0, 658, 657, 667, 668, 660, 661, 662, 663,
	664, 665, 666, 659, 1331, 1332, 669, 1333, 1334, 0,
	0, 0, 288, 1419, 1420, 0, 1423, 90, 0, 1341,
	1342, 0, 288, 288, 90, 90, 90, 0, 1312, 1313,
	288, 0, 0, 288, 0, 0, 288, 1428, 0, 0,
	288, 1406, 90, 0, 0, 0, 0, 90, 90, 90,
	288, 90, 90, 1405, 1206, 1449, 1407, 0, 1409, 0,
	1458, 0, 0, 89, 90, 90, 0, 0, 0, 0,
	0, 89, 0, 1408, 1243, 0, 0, 1467, 0, 0,
	1051, 0, 0, 0, 0, 1418, 89, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 1457,
	1393, 0, 0, 1372, 0, 0, 0, 1490, 0, 0,
	1485, 1476, 0, 1478, 0, 0, 0, 0, 0, 0,
	1425, 1426, 0, 1427, 0, 0, 1429, 0, 1431, 1488,
	0, 0, 0, 0, 89, 89, 0, 89, 1489, 90,
	1496, 1481, 89, 0, 89, 89, 89, 287, 0, 1510,
	89, 1511, 1513, 1514, 1421, 1503, 1501, 1509, 1354, 0,
	0, 0, 1505, 1515, 1521, 1528, 0, 89, 287, 0,
	0, 0, 90, 90, 1536, 0, 0, 1529, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	90, 0, 0, 1549, 1422, 0, 0, 288, 1424, 1557,
	90, 0, 0, 1556, 89, 288, 0, 0, 0, 1433,
	1434, 1555, 1354, 288, 288, 89, 89, 288, 288, 422,
	0, 288, 288, 288, 90, 0, 0, 1571, 1570, 0,
	0, 89, 1485, 1051, 0, 1451, 1452, 90, 1455, 1577,
	0, 1206, 287, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 1466, 0, 1585, 0,
	0, 0, 0, 0, 1438, 0, 1590, 0, 1537, 1592,
	89, 1443, 0, 0, 0, 0, 333, 1594, 0, 0,
	1491, 1492, 1493, 1494, 1495, 1605, 0, 0, 1498, 1499,
	1616, 288, 90, 0, 90, 0, 0, 0, 0, 0,
	288, 288, 288, 288, 288, 0, 288, 288, 0, 0,
	288, 90, 658, 657, 667, 668, 660, 661, 662, 663,
	664, 665, 666, 659, 0, 0, 669, 0, 288, 0,
	0, 0, 0, 288, 0, 288, 288, 0, 0, 288,
	90, 0, 1580, 1512, 658, 657, 667, 668, 660, 661,
	662, 663, 664, 665, 666, 659, 0, 0, 669, 0,
	0, 0, 29, 30, 58, 32, 33, 0, 0, 0,
	0, 1538, 1539, 1540, 1541, 0, 1545, 1309, 1546, 1547,
	0, 62, 0, 371, 28, 0, 34, 53, 54, 0,
	56, 1552, 0, 1553, 1554, 0, 0, 658, 657, 667,
	668, 660, 661, 662, 663, 664, 665, 666, 659, 43,
	0, 669, 28, 57, 0, 0, 0, 0, 0, 0,
	0, 0, 1573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 288, 0, 0, 0, 1582, 1609, 401,
	0, 0, 0, 288, 288, 288, 288, 288, 0, 0,
	0, 0, 0, 0, 0, 288, 0, 0, 0, 288,
	0, 0, 0, 288, 0, 0, 1436, 288, 0, 36,
	37, 39, 38, 41, 0, 55, 0, 0, 0, 1617,
	1618, 0, 0, 0, 0, 0, 90, 0, 0, 1435,
	0, 368, 0, 0, 0, 0, 0, 0, 42, 61,
	60, 0, 0, 51, 52, 40, 0, 658, 657, 667,
	668, 660, 661, 662, 663, 664, 665, 666, 659, 44,
	45, 669, 46, 47, 48, 49, 0, 0, 88, 0,
	0, 0, 0, 0, 90, 90, 0, 0, 0, 0,
	321, 0, 0, 0, 0, 650, 658, 657, 667, 668,
	660, 661, 662, 663, 664, 665, 666, 659, 0, 0,
	669, 0, 0, 0, 90, 0, 0, 0, 440, 658,
	657, 667, 668, 660, 661, 662, 663, 664, 665, 666,
	659, 333, 0, 669, 0, 0, 0, 0, 90, 0,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 738, 741, 0, 0,
	0, 0, 0, 0, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 653, 90, 656, 0, 0, 0, 90,
	90, 670, 671, 672, 673, 674, 675, 676, 0, 654,
	655, 652, 658, 657, 667, 668, 660, 661, 662, 663,
	664, 665, 666, 659, 0, 90, 669, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 615, 0, 90,
	0, 90, 90, 0, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	0, 678, 680, 658, 657, 667, 668, 660, 661, 662,
	663, 664, 665, 666, 659, 0, 0, 669, 0, 288,
	0, 0, 0, 0, 0, 90, 0, 0, 90, 90,
	90, 288, 693, 0, 0, 0, 698, 699, 700, 701,
	702, 703, 704, 705, 0, 708, 711, 711, 711, 717,
	711, 711, 717, 711, 725, 726, 727, 728, 729, 730,
	731, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 440, 0, 0, 0, 766,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 633, 635, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 899, 900, 901, 902, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 90, 0, 90, 0, 0, 0, 0, 90, 0,
	90, 90, 90, 288, 0, 0, 90, 0, 0, 0,
	952, 953, 0, 291, 754, 0, 0, 0, 0, 0,
	0, 0, 294, 90, 288, 440, 0, 0, 0, 0,
	303, 786, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 0,
	0, 615, 615, 615, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 301, 0, 0, 0, 0, 615,
	308, 90, 90, 0, 615, 615, 615, 0, 615, 615,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 615, 615, 0, 1045, 0, 0, 0, 288, 0,
	292, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 305, 295, 0,
	306, 307, 314, 0, 0, 0, 298, 300, 311, 296,
	297, 316, 315, 0, 293, 313, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 0, 0, 0, 0, 440,
	440, 440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 440, 440, 440, 0, 440, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 766, 0, 0, 0, 766, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 0, 0, 0,
	0, 0, 0, 0, 938, 0, 440, 0, 0, 0,
	0, 0, 0, 1183, 1184, 741, 0, 0, 0, 0,
	968, 0, 0, 0, 0, 0, 0, 0, 802, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 973, 615,
	0, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 615, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 440, 815,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 0, 0, 828, 831, 832, 833, 834,
	835, 836, 440, 837, 838, 839, 840, 841, 816, 817,
	818, 819, 800, 801, 829, 0, 803, 0, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 820, 821,
	822, 823, 824, 825, 826, 827, 0, 1150, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	766, 830, 0, 0, 0, 369, 1202, 1203, 0, 1338,
	766, 766, 766, 766, 766, 1135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 1228, 0,
	0, 0, 0, 1347, 766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 317,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 431, 0, 0, 0, 0, 286, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	0, 0, 1459, 0, 1355, 1460, 28, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1273,
	440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 286, 0, 1500, 333, 0, 0,
	286, 0, 0, 0, 440, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 968, 0, 0, 1357, 1359, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 440, 1386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	1410, 0, 0, 1415, 1416, 1417, 0, 0, 0, 0,
	286, 286, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1355, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 1533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 1355, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 1506, 1507, 0, 1508, 0,
	0, 286, 286, 1472, 0, 1472, 1472, 1472, 0, 286,
	0, 1386, 286, 0, 0, 286, 0, 0, 0, 868,
	0, 0, 1603, 0, 0, 0, 0, 0, 1472, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 440, 440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	968, 0, 1578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 423,
	868, 0, 0, 0, 423, 423, 0, 0, 423, 423,
	423, 1472, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 423, 423, 423, 423, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 868, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 286, 1027, 0, 0, 286, 286, 0, 0,
	286, 1035, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	286, 286, 286, 286, 0, 286, 286, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 286, 0, 1132, 1133, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 286, 286, 286, 286, 286, 0, 0, 0,
	0, 0, 0, 0, 1220, 0, 0, 0, 286, 0,
	0, 0, 1027, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1027, 0, 0, 0, 0, 0, 550, 538,
	0, 495, 553, 468, 485, 561, 486, 489, 526, 453,
	508, 181, 483, 286, 472, 448, 479, 449, 470, 497,
	123, 501, 467, 540, 511, 552, 152, 0, 473, 559,
	155, 517, 0, 228, 169, 0, 0, 0, 499, 542,
	506, 535, 494, 527, 458, 516, 554, 484, 524, 555,
	0, 0, 0, 91, 92, 93, 0, 1052, 1053, 0,
	0, 0, 0, 0, 113, 0, 521, 549, 481, 523,
	525, 563, 447, 518, 969, 451, 454, 560, 545, 476,
	477, 1244, 0, 0, 0, 0, 0, 286, 498, 507,
	532, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	474, 0, 515, 0, 0, 0, 455, 452, 0, 0,
	0, 0, 496, 0, 0, 0, 457, 0, 475, 533,
	0, 445, 132, 537, 544, 493, 289, 548, 491, 490,
	551, 200, 0, 232, 136, 151, 109, 148, 95, 105,
	0, 134, 178, 208, 212, 541, 471, 480, 117, 478,
	210, 188, 249, 514, 190, 209, 156, 238, 201, 248,
	258, 259, 235, 256, 267, 225, 98, 234, 246, 114,
	220, 0, 0, 0, 100, 244, 231, 167, 145, 146,
	99, 0, 206, 122, 130, 119, 180, 241, 242, 118,
	270, 106, 255, 102, 107, 254, 174, 237, 245, 168,
	161, 101, 243, 166, 160, 150, 126, 138, 198, 158,
	199, 139, 171, 170, 172, 0, 450, 0, 229, 252,
	271, 111, 466, 236, 263, 266, 0, 202, 112, 131,
	125, 197, 129, 153, 262, 264, 265, 173, 108, 141,
	226, 149, 157, 205, 269, 187, 211, 115, 251, 227,
	462, 465, 460, 461, 509, 510, 556, 557, 558, 534,
	456, 0, 463, 464, 0, 539, 546, 547, 513, 94,
	103, 154, 268, 203, 128, 253, 446, 459, 121, 469,
	0, 0, 482, 487, 488, 500, 502, 503, 504, 505,
	512, 519, 520, 522, 528, 529, 530, 531, 536, 543,
	562, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 159, 162, 163, 164,
	165, 175, 176, 177, 179, 182, 183, 184, 185, 186,
	189, 191, 192, 193, 194, 195, 196, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 250, 257, 260, 135, 247, 261,
	550, 538, 0, 495, 553, 468, 485, 561, 486, 489,
	526, 453, 508, 181, 483, 0, 472, 448, 479, 449,
	470, 497, 123, 501, 467, 540, 511, 552, 152, 0,
	473, 559, 155, 517, 0, 228, 169, 0, 0, 0,
	499, 542, 506, 535, 494, 527, 458, 516, 554, 484,
	524, 555, 0, 0, 0, 91, 92, 93, 0, 1052,
	1053, 0, 0, 0, 0, 0, 113, 0, 521, 549,
	481, 523, 525, 563, 447, 518, 0, 451, 454, 560,
	545, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	498, 507, 532, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 515, 0, 0, 0, 455, 452,
	0, 0, 0, 0, 496, 0, 0, 0, 457, 0,
	475, 533, 0, 445, 132, 537, 544, 493, 289, 548,
	491, 490, 551, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 541, 471, 480,
	117, 478, 210, 188, 249, 514, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 450, 0,
	229, 252, 271, 111, 466, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 462, 465, 460, 461, 509, 510, 556, 557,
	558, 534, 456, 0, 463, 464, 0, 539, 546, 547,
	513, 94, 103, 154, 268, 203, 128, 253, 446, 459,
	121, 469, 0, 0, 482, 487, 488, 500, 502, 503,
	504, 505, 512, 519, 520, 522, 528, 529, 530, 531,
	536, 543, 562, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 135,
	247, 261, 550, 538, 0, 495, 553, 468, 485, 561,
	486, 489, 526, 453, 508, 181, 483, 0, 472, 448,
	479, 449, 470, 497, 123, 501, 467, 540, 511, 552,
	152, 0, 473, 559, 155, 517, 0, 228, 169, 0,
	0, 0, 499, 542, 506, 535, 494, 527, 458, 516,
	554, 484, 524, 555, 57, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	521, 549, 481, 523, 525, 563, 447, 518, 0, 451,
	454, 560, 545, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 498, 507, 532, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 515, 0, 0, 0,
	455, 452, 0, 0, 0, 0, 496, 0, 0, 0,
	457, 0, 475, 533, 0, 445, 132, 537, 544, 493,
	289, 548, 491, 490, 551, 200, 0, 232, 136, 151,
	109, 148, 95, 105, 0, 134, 178, 208, 212, 541,
	471, 480, 117, 478, 210, 188, 249, 514, 190, 209,
	156, 238, 201, 248, 258, 259, 235, 256, 267, 225,
	98, 234, 246, 114, 220, 0, 0, 0, 100, 244,
	231, 167, 145, 146, 99, 0, 206, 122, 130, 119,
	180, 241, 242, 118, 270, 106, 255, 102, 107, 254,
	174, 237, 245, 168, 161, 101, 243, 166, 160, 150,
	126, 138, 198, 158, 199, 139, 171, 170, 172, 0,
	450, 0, 229, 252, 271, 111, 466, 236, 263, 266,
	0, 202, 112, 131, 125, 197, 129, 153, 262, 264,
	265, 173, 108, 141, 226, 149, 157, 205, 269, 187,
	211, 115, 251, 227, 462, 465, 460, 461, 509, 510,
	556, 557, 558, 534, 456, 0, 463, 464, 0, 539,
	546, 547, 513, 94, 103, 154, 268, 203, 128, 253,
	446, 459, 121, 469, 0, 0, 482, 487, 488, 500,
	502, 503, 504, 505, 512, 519, 520, 522, 528, 529,
	530, 531, 536, 543, 562, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	159, 162, 163, 164, 165, 175, 176, 177, 179, 182,
	183, 184, 185, 186, 189, 191, 192, 193, 194, 195,
	196, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 250, 257,
	260, 135, 247, 261, 550, 538, 0, 495, 553, 468,
	485, 561, 486, 489, 526, 453, 508, 181, 483, 0,
	472, 448, 479, 449, 470, 497, 123, 501, 467, 540,
	511, 552, 152, 0, 473, 559, 155, 517, 0, 228,
	169, 0, 0, 0, 499, 542, 506, 535, 494, 527,
	458, 516, 554, 484, 524, 555, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 521, 549, 481, 523, 525, 563, 447, 518,
	0, 451, 454, 560, 545, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 532, 492, 0, 0,
	0, 0, 0, 0, 1348, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 533, 0, 445, 132, 537,
	544, 493, 289, 548, 491, 490, 551, 200, 0, 232,
	136, 151, 109, 148, 95, 105, 0, 134, 178, 208,
	212, 541, 471, 480, 117, 478, 210, 188, 249, 514,
	190, 209, 156, 238, 201, 248, 258, 259, 235, 256,
	267, 225, 98, 234, 246, 114, 220, 0, 0, 0,
	100, 244, 231, 167, 145, 146, 99, 0, 206, 122,
	130, 119, 180, 241, 242, 118, 270, 106, 255, 102,
	107, 254, 174, 237, 245, 168, 161, 101, 243, 166,
	160, 150, 126, 138, 198, 158, 199, 139, 171, 170,
	172, 0, 450, 0, 229, 252, 271, 111, 466, 236,
	263, 266, 0, 202, 112, 131, 125, 197, 129, 153,
	262, 264, 265, 173, 108, 141, 226, 149, 157, 205,
	269, 187, 211, 115, 251, 227, 462, 465, 460, 461,
	509, 510, 556, 557, 558, 534, 456, 0, 463, 464,
	0, 539, 546, 547, 513, 94, 103, 154, 268, 203,
	128, 253, 446, 459, 121, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	528, 529, 530, 531, 536, 543, 562, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 159, 162, 163, 164, 165, 175, 176, 177,
	179, 182, 183, 184, 185, 186, 189, 191, 192, 193,
	194, 195, 196, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	250, 257, 260, 135, 247, 261, 550, 538, 0, 495,
	553, 468, 485, 561, 486, 489, 526, 453, 508, 181,
	483, 0, 472, 448, 479, 449, 470, 497, 123, 501,
	467, 540, 511, 552, 152, 0, 473, 559, 155, 517,
	0, 228, 169, 0, 0, 0, 499, 542, 506, 535,
	494, 527, 458, 516, 554, 484, 524, 555, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 521, 549, 481, 523, 525, 563,
	447, 518, 0, 451, 454, 560, 545, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 498, 507, 532, 492,
	0, 0, 0, 0, 0, 0, 1036, 0, 474, 0,
	515, 0, 0, 0, 455, 452, 0, 0, 0, 0,
	496, 0, 0, 0, 457, 0, 475, 533, 0, 445,
	132, 537, 544, 493, 289, 548, 491, 490, 551, 200,
	0, 232, 136, 151, 109, 148, 95, 105, 0, 134,
	178, 208, 212, 541, 471, 480, 117, 478, 210, 188,
	249, 514, 190, 209, 156, 238, 201, 248, 258, 259,
	235, 256, 267, 225, 98, 234, 246, 114, 220, 0,
	0, 0, 100, 244, 231, 167, 145, 146, 99, 0,
	206, 122, 130, 119, 180, 241, 242, 118, 270, 106,
	255, 102, 107, 254, 174, 237, 245, 168, 161, 101,
	243, 166, 160, 150, 126, 138, 198, 158, 199, 139,
	171, 170, 172, 0, 450, 0, 229, 252, 271, 111,
	466, 236, 263, 266, 0, 202, 112, 131, 125, 197,
	129, 153, 262, 264, 265, 173, 108, 141, 226, 149,
	157, 205, 269, 187, 211, 115, 251, 227, 462, 465,
	460, 461, 509, 510, 556, 557, 558, 534, 456, 0,
	463, 464, 0, 539, 546, 547, 513, 94, 103, 154,
	268, 203, 128, 253, 446, 459, 121, 469, 0, 0,
	482, 487, 488, 500, 502, 503, 504, 505, 512, 519,
	520, 522, 528, 529, 530, 531, 536, 543, 562, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 159, 162, 163, 164, 165, 175,
	176, 177, 179, 182, 183, 184, 185, 186, 189, 191,
	192, 193, 194, 195, 196, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 250, 257, 260, 135, 247, 261, 550, 538,
	0, 495, 553, 468, 485, 561, 486, 489, 526, 453,
	508, 181, 483, 0, 472, 448, 479, 449, 470, 497,
	123, 501, 467, 540, 511, 552, 152, 0, 473, 559,
	155, 517, 0, 228, 169, 0, 0, 0, 499, 542,
	506, 535, 494, 527, 458, 516, 554, 484, 524, 555,
	0, 0, 0, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 521, 549, 481, 523,
	525, 563, 447, 518, 0, 451, 454, 560, 545, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 498, 507,
	532, 492, 0, 0, 0, 0, 0, 0, 1000, 0,
	474, 0, 515, 0, 0, 0, 455, 452, 0, 0,
	0, 0, 496, 0, 0, 0, 457, 0, 475, 533,
	0, 445, 132, 537, 544, 493, 289, 548, 491, 490,
	551, 200, 0, 232, 136, 151, 109, 148, 95, 105,
	0, 134, 178, 208, 212, 541, 471, 480, 117, 478,
	210, 188, 249, 514, 190, 209, 156, 238, 201, 248,
	258, 259, 235, 256, 267, 225, 98, 234, 246, 114,
	220, 0, 0, 0, 100, 244, 231, 167, 145, 146,
	99, 0, 206, 122, 130, 119, 180, 241, 242, 118,
	270, 106, 255, 102, 107, 254, 174, 237, 245, 168,
	161, 101, 243, 166, 160, 150, 126, 138, 198, 158,
	199, 139, 171, 170, 172, 0, 450, 0, 229, 252,
	271, 111, 466, 236, 263, 266, 0, 202, 112, 131,
	125, 197, 129, 153, 262, 264, 265, 173, 108, 141,
	226, 149, 157, 205, 269, 187, 211, 115, 251, 227,
	462, 465, 460, 461, 509, 510, 556, 557, 558, 534,
	456, 0, 463, 464, 0, 539, 546, 547, 513, 94,
	103, 154, 268, 203, 128, 253, 446, 459, 121, 469,
	0, 0, 482, 487, 488, 500, 502, 503, 504, 505,
	512, 519, 520, 522, 528, 529, 530, 531, 536, 543,
	562, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 159, 162, 163, 164,
	165, 175, 176, 177, 179, 182, 183, 184, 185, 186,
	189, 191, 192, 193, 194, 195, 196, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 250, 257, 260, 135, 247, 261,
	550, 538, 0, 495, 553, 468, 485, 561, 486, 489,
	526, 453, 508, 181, 483, 0, 472, 448, 479, 449,
	470, 497, 123, 501, 467, 540, 511, 552, 152, 0,
	473, 559, 155, 517, 0, 228, 169, 0, 0, 0,
	499, 542, 506, 535, 494, 527, 458, 516, 554, 484,
	524, 555, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 521, 549,
	481, 523, 525, 563, 447, 518, 0, 451, 454, 560,
	545, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	498, 507, 532, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 474, 0, 515, 0, 0, 0, 455, 452,
	0, 0, 0, 0, 496, 0, 0, 0, 457, 0,
	475, 533, 0, 445, 132, 537, 544, 493, 289, 548,
	491, 490, 551, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 541, 471, 480,
	117, 478, 210, 188, 249, 514, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 450, 0,
	229, 252, 271, 111, 466, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 462, 465, 460, 461, 509, 510, 556, 557,
	558, 534, 456, 0, 463, 464, 0, 539, 546, 547,
	513, 94, 103, 154, 268, 203, 128, 253, 446, 459,
	121, 469, 0, 0, 482, 487, 488, 500, 502, 503,
	504, 505, 512, 519, 520, 522, 528, 529, 530, 531,
	536, 543, 562, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 135,
	247, 261, 550, 538, 0, 495, 553, 468, 485, 561,
	486, 489, 526, 453, 508, 181, 483, 0, 472, 448,
	479, 449, 470, 497, 123, 501, 467, 540, 511, 552,
	152, 0, 473, 559, 155, 517, 0, 228, 169, 0,
	0, 0, 499, 542, 506, 535, 494, 527, 458, 516,
	554, 484, 524, 555, 0, 0, 0, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 0,
	521, 549, 481, 523, 525, 563, 447, 518, 0, 451,
	454, 560, 545, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 498, 507, 532, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 474, 0, 515, 0, 0, 0,
	455, 452, 0, 0, 0, 0, 496, 0, 0, 0,
	457, 0, 475, 533, 0, 445, 132, 537, 544, 493,
	289, 548, 491, 490, 551, 200, 0, 232, 136, 151,
	109, 148, 95, 105, 0, 134, 178, 208, 212, 541,
	471, 480, 117, 478, 210, 188, 249, 514, 190, 209,
	156, 238, 201, 248, 258, 259, 235, 256, 267, 225,
	98, 234, 246, 114, 220, 0, 0, 0, 100, 244,
	231, 167, 145, 146, 99, 0, 206, 122, 130, 119,
	180, 241, 242, 118, 270, 106, 255, 102, 443, 254,
	174, 237, 245, 168, 161, 101, 243, 166, 160, 150,
	126, 138, 198, 158, 199, 139, 171, 170, 172, 0,
	450, 0, 229, 252, 271, 111, 466, 236, 263, 266,
	0, 202, 112, 131, 125, 197, 129, 153, 262, 264,
	265, 444, 442, 141, 226, 149, 157, 205, 269, 187,
	211, 115, 251, 227, 462, 465, 460, 461, 509, 510,
	556, 557, 558, 534, 456, 0, 463, 464, 0, 539,
	546, 547, 513, 94, 103, 154, 268, 203, 128, 253,
	446, 459, 121, 469, 0, 0, 482, 487, 488, 500,
	502, 503, 504, 505, 512, 519, 520, 522, 528, 529,
	530, 531, 536, 543, 562, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	159, 162, 163, 164, 165, 175, 176, 177, 179, 182,
	183, 184, 185, 186, 189, 191, 192, 193, 194, 195,
	196, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 250, 257,
	260, 135, 247, 261, 550, 538, 0, 495, 553, 468,
	485, 561, 486, 489, 526, 453, 508, 181, 483, 0,
	472, 448, 479, 449, 470, 497, 123, 501, 467, 540,
	511, 552, 152, 0, 473, 559, 155, 517, 0, 228,
	169, 0, 0, 0, 499, 542, 506, 535, 494, 527,
	458, 516, 554, 484, 524, 555, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 521, 549, 481, 523, 525, 563, 447, 518,
	0, 451, 454, 560, 545, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 498, 507, 532, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 474, 0, 515, 0,
	0, 0, 455, 452, 0, 0, 0, 0, 496, 0,
	0, 0, 457, 0, 475, 533, 0, 445, 132, 537,
	544, 493, 289, 548, 491, 490, 551, 200, 0, 232,
	136, 151, 109, 148, 95, 105, 0, 134, 178, 208,
	212, 541, 471, 480, 117, 478, 210, 188, 249, 514,
	190, 209, 156, 238, 201, 248, 258, 259, 235, 256,
	267, 225, 98, 234, 778, 114, 220, 0, 0, 0,
	100, 244, 231, 167, 145, 146, 99, 0, 206, 122,
	130, 119, 180, 241, 242, 118, 270, 106, 255, 102,
	443, 254, 174, 237, 245, 168, 161, 101, 243, 166,
	160, 150, 126, 138, 198, 158, 199, 139, 171, 170,
	172, 0, 450, 0, 229, 252, 271, 111, 466, 236,
	263, 266, 0, 202, 112, 131, 125, 197, 129, 153,
	262, 264, 265, 444, 442, 141, 226, 149, 157, 205,
	269, 187, 211, 115, 251, 227, 462, 465, 460, 461,
	509, 510, 556, 557, 558, 534, 456, 0, 463, 464,
	0, 539, 546, 547, 513, 94, 103, 154, 268, 203,
	128, 253, 446, 459, 121, 469, 0, 0, 482, 487,
	488, 500, 502, 503, 504, 505, 512, 519, 520, 522,
	528, 529, 530, 531, 536, 543, 562, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 159, 162, 163, 164, 165, 175, 176, 177,
	179, 182, 183, 184, 185, 186, 189, 191, 192, 193,
	194, 195, 196, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	250, 257, 260, 135, 247, 261, 550, 538, 0, 495,
	553, 468, 485, 561, 486, 489, 526, 453, 508, 181,
	483, 0, 472, 448, 479, 449, 470, 497, 123, 501,
	467, 540, 511, 552, 152, 0, 473, 559, 155, 517,
	0, 228, 169, 0, 0, 0, 499, 542, 506, 535,
	494, 527, 458, 516, 554, 484, 524, 555, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 521, 549, 481, 523, 525, 563,
	447, 518, 0, 451, 454, 560, 545, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 498, 507, 532, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 474, 0,
	515, 0, 0, 0, 455, 452, 0, 0, 0, 0,
	496, 0, 0, 0, 457, 0, 475, 533, 0, 445,
	132, 537, 544, 493, 289, 548, 491, 490, 551, 200,
	0, 232, 136, 151, 109, 148, 95, 105, 0, 134,
	178, 208, 212, 541, 471, 480, 117, 478, 210, 188,
	249, 514, 190, 209, 156, 238, 201, 248, 258, 259,
	235, 256, 267, 225, 98, 234, 434, 114, 220, 0,
	0, 0, 100, 244, 231, 167, 145, 146, 99, 0,
	206, 122, 130, 119, 180, 241, 242, 118, 270, 106,
	255, 102, 443, 254, 174, 237, 245, 168, 161, 101,
	243, 166, 160, 150, 126, 138, 198, 158, 199, 139,
	171, 170, 172, 0, 450, 0, 229, 252, 271, 111,
	466, 236, 263, 266, 0, 202, 112, 131, 125, 197,
	129, 153, 262, 264, 265, 444, 442, 437, 436, 149,
	157, 205, 269, 187, 211, 115, 251, 227, 462, 465,
	460, 461, 509, 510, 556, 557, 558, 534, 456, 0,
	463, 464, 0, 539, 546, 547, 513, 94, 103, 154,
	268, 203, 128, 253, 446, 459, 121, 469, 0, 0,
	482, 487, 488, 500, 502, 503, 504, 505, 512, 519,
	520, 522, 528, 529, 530, 531, 536, 543, 562, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 159, 162, 163, 164, 165, 175,
	176, 177, 179, 182, 183, 184, 185, 186, 189, 191,
	192, 193, 194, 195, 196, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 250, 257, 260, 135, 247, 261, 181, 0,
	0, 940, 0, 338, 0, 0, 0, 123, 0, 337,
	0, 0, 0, 152, 0, 941, 381, 155, 0, 0,
	228, 169, 0, 0, 0, 0, 0, 372, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 57, 0, 0,
	91, 92, 93, 359, 358, 361, 362, 363, 364, 0,
	0, 113, 360, 365, 366, 367, 0, 0, 0, 0,
	335, 352, 0, 380, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 350, 421, 0, 0, 0, 395,
	0, 351, 0, 0, 344, 345, 347, 346, 348, 353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	394, 0, 0, 289, 0, 0, 392, 0, 200, 0,
	232, 136, 151, 109, 148, 95, 105, 0, 134, 178,
	208, 212, 0, 0, 0, 117, 0, 210, 188, 249,
	0, 190, 209, 156, 238, 201, 248, 258, 259, 235,
	256, 267, 225, 98, 234, 246, 114, 220, 0, 0,
	0, 100, 244, 231, 167, 145, 146, 99, 0, 206,
	122, 130, 119, 180, 241, 242, 118, 270, 106, 255,
	102, 107, 254, 174, 237, 245, 168, 161, 101, 243,
	166, 160, 150, 126, 138, 198, 158, 199, 139, 171,
	170, 172, 0, 0, 0, 229, 252, 271, 111, 0,
	236, 263, 266, 0, 202, 112, 131, 125, 197, 129,
	153, 262, 264, 265, 173, 108, 141, 226, 149, 157,
	205, 269, 187, 211, 115, 251, 227, 382, 393, 388,
	389, 386, 387, 385, 384, 383, 396, 374, 375, 376,
	377, 379, 0, 390, 391, 378, 94, 103, 154, 268,
	203, 128, 253, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 159, 162, 163, 164, 165, 175, 176,
	177, 179, 182, 183, 184, 185, 186, 189, 191, 192,
	193, 194, 195, 196, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 250, 257, 260, 135, 247, 261, 181, 0, 0,
	0, 0, 338, 0, 0, 0, 123, 0, 337, 0,
	0, 0, 152, 0, 0, 381, 155, 0, 0, 228,
	169, 0, 0, 0, 0, 0, 372, 373, 0, 0,
	0, 0, 0, 0, 1043, 0, 57, 0, 0, 91,
	92, 93, 359, 358, 361, 362, 363, 364, 0, 0,
	113, 360, 365, 366, 367, 1044, 0, 0, 0, 335,
	352, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 349, 350, 0, 0, 0, 0, 395, 0,
	351, 0, 0, 344, 345, 347, 346, 348, 353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 394,
	0, 0, 289, 0, 0, 392, 0, 200, 0, 232,
	136, 151, 109, 148, 95, 105, 0, 134, 178, 208,
	212, 0, 0, 0, 117, 0, 210, 188, 249, 0,
	190, 209, 156, 238, 201, 248, 258, 259, 235, 256,
	267, 225, 98, 234, 246, 114, 220, 0, 0, 0,
	100, 244, 231, 167, 145, 146, 99, 0, 206, 122,
	130, 119, 180, 241, 242, 118, 270, 106, 255, 102,
	107, 254, 174, 237, 245, 168, 161, 101, 243, 166,
	160, 150, 126, 138, 198, 158, 199, 139, 171, 170,
	172, 0, 0, 0, 229, 252, 271, 111, 0, 236,
	263, 266, 0, 202, 112, 131, 125, 197, 129, 153,
	262, 264, 265, 173, 108, 141, 226, 149, 157, 205,
	269, 187, 211, 115, 251, 227, 382, 393, 388, 389,
	386, 387, 385, 384, 383, 396, 374, 375, 376, 377,
	379, 0, 390, 391, 378, 94, 103, 154, 268, 203,
	128, 253, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 159, 162, 163, 164, 165, 175, 176, 177,
	179, 182, 183, 184, 185, 186, 189, 191, 192, 193,
	194, 195, 196, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	250, 257, 260, 135, 247, 261, 181, 0, 0, 0,
	0, 338, 0, 0, 0, 123, 0, 337, 0, 0,
	0, 152, 0, 0, 381, 155, 0, 0, 228, 169,
	0, 0, 0, 0, 0, 372, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 409, 91, 92,
	93, 359, 358, 361, 362, 363, 364, 0, 0, 113,
	360, 365, 366, 367, 0, 0, 0, 0, 335, 352,
	0, 380, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 350, 0, 0, 0, 0, 395, 0, 351,
	0, 0, 344, 345, 347, 346, 348, 353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 394, 0,
	0, 289, 0, 0, 392, 0, 200, 0, 232, 136,
	151, 109, 148, 95, 105, 0, 134, 178, 208, 212,
	0, 0, 0, 117, 0, 210, 188, 249, 0, 190,
	209, 156, 238, 201, 248, 258, 259, 235, 256, 267,
	225, 98, 234, 246, 114, 220, 0, 0, 0, 100,
	244, 231, 167, 145, 146, 99, 0, 206, 122, 130,
	119, 180, 241, 242, 118, 270, 106, 255, 102, 107,
	254, 174, 237, 245, 168, 161, 101, 243, 166, 160,
	150, 126, 138, 198, 158, 199, 139, 171, 170, 172,
	0, 0, 0, 229, 252, 271, 111, 0, 236, 263,
	266, 0, 202, 112, 131, 125, 197, 129, 153, 262,
	264, 265, 173, 108, 141, 226, 149, 157, 205, 269,
	187, 211, 115, 251, 227, 382, 393, 388, 389, 386,
	387, 385, 384, 383, 396, 374, 375, 376, 377, 379,
	0, 390, 391, 378, 94, 103, 154, 268, 203, 128,
	253, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 159, 162, 163, 164, 165, 175, 176, 177, 179,
	182, 183, 184, 185, 186, 189, 191, 192, 193, 194,
	195, 196, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 250,
	257, 260, 135, 247, 261, 181, 0, 0, 0, 0,
	338, 0, 0, 0, 123, 0, 337, 0, 0, 0,
	152, 0, 0, 381, 155, 0, 0, 228, 169, 0,
	0, 0, 0, 0, 372, 373, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 91, 92, 93,
	359, 358, 361, 362, 363, 364, 0, 0, 113, 360,
	365, 366, 367, 0, 0, 0, 0, 335, 352, 0,
	380, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 350, 421, 0, 0, 0, 395, 0, 351, 0,
	0, 344, 345, 347, 346, 348, 353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 394, 0, 0,
	289, 0, 0, 392, 0, 200, 0, 232, 136, 151,
	109, 148, 95, 105, 0, 134, 178, 208, 212, 0,
	0, 0, 117, 0, 210, 188, 249, 0, 190, 209,
	156, 238, 201, 248, 258, 259, 235, 256, 267, 225,
	98, 234, 246, 114, 220, 0, 0, 0, 100, 244,
	231, 167, 145, 146, 99, 0, 206, 122, 130, 119,
	180, 241, 242, 118, 270, 106, 255, 102, 107, 254,
	174, 237, 245, 168, 161, 101, 243, 166, 160, 150,
	126, 138, 198, 158, 199, 139, 171, 170, 172, 0,
	0, 0, 229, 252, 271, 111, 0, 236, 263, 266,
	0, 202, 112, 131, 125, 197, 129, 153, 262, 264,
	265, 173, 108, 141, 226, 149, 157, 205, 269, 187,
	211, 115, 251, 227, 382, 393, 388, 389, 386, 387,
	385, 384, 383, 396, 374, 375, 376, 377, 379, 0,
	390, 391, 378, 94, 103, 154, 268, 203, 128, 253,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	159, 162, 163, 164, 165, 175, 176, 177, 179, 182,
	183, 184, 185, 186, 189, 191, 192, 193, 194, 195,
	196, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 250, 257,
	260, 135, 247, 261, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 123, 0, 337, 0, 0, 0, 152,
	0, 0, 381, 155, 0, 0, 228, 169, 0, 0,
	0, 0, 0, 372, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 359,
	958, 361, 362, 363, 364, 0, 0, 113, 360, 365,
	366, 367, 0, 0, 0, 0, 335, 352, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	350, 421, 0, 0, 0, 395, 0, 351, 0, 0,
	344, 345, 347, 346, 348, 353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 394, 0, 0, 289,
	0, 0, 392, 0, 200, 0, 232, 136, 151, 109,
	148, 95, 105, 0, 134, 178, 208, 212, 0, 0,
	0, 117, 0, 210, 188, 249, 0, 190, 209, 156,
	238, 201, 248, 258, 259, 235, 256, 267, 225, 98,
	234, 246, 114, 220, 0, 0, 0, 100, 244, 231,
	167, 145, 146, 99, 0, 206, 122, 130, 119, 180,
	241, 242, 118, 270, 106, 255, 102, 107, 254, 174,
	237, 245, 168, 161, 101, 243, 166, 160, 150, 126,
	138, 198, 158, 199, 139, 171, 170, 172, 0, 0,
	0, 229, 252, 271, 111, 0, 236, 263, 266, 0,
	202, 112, 131, 125, 197, 129, 153, 262, 264, 265,
	173, 108, 141, 226, 149, 157, 205, 269, 187, 211,
	115, 251, 227, 382, 393, 388, 389, 386, 387, 385,
	384, 383, 396, 374, 375, 376, 377, 379, 0, 390,
	391, 378, 94, 103, 154, 268, 203, 128, 253, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 159,
	162, 163, 164, 165, 175, 176, 177, 179, 182, 183,
	184, 185, 186, 189, 191, 192, 193, 194, 195, 196,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 250, 257, 260,
	135, 247, 261, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 123, 0, 337, 0, 0, 0, 152, 0,
	0, 381, 155, 0, 0, 228, 169, 0, 0, 0,
	0, 0, 372, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 91, 92, 93, 359, 955,
	361, 362, 363, 364, 0, 0, 113, 360, 365, 366,
	367, 0, 0, 0, 0, 335, 352, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 350,
	421, 0, 0, 0, 395, 0, 351, 0, 0, 344,
	345, 347, 346, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 394, 0, 0, 289, 0,
	0, 392, 0, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 0, 0, 0,
	117, 0, 210, 188, 249, 0, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 0, 0,
	229, 252, 271, 111, 0, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 382, 393, 388, 389, 386, 387, 385, 384,
	383, 396, 374, 375, 376, 377, 379, 0, 390, 391,
	378, 94, 103, 154, 268, 203, 128, 253, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 135,
	247, 261, 402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 338,
	0, 0, 0, 123, 0, 337, 0, 0, 0, 152,
	0, 0, 381, 155, 0, 0, 228, 169, 0, 0,
	0, 0, 0, 372, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 91, 92, 93, 359,
	358, 361, 362, 363, 364, 0, 0, 113, 360, 365,
	366, 367, 0, 0, 0, 0, 335, 352, 0, 380,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	350, 0, 0, 0, 0, 395, 0, 351, 0, 0,
	344, 345, 347, 346, 348, 353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 394, 0, 0, 289,
	0, 0, 392, 0, 200, 0, 232, 136, 151, 109,
	148, 95, 105, 0, 134, 178, 208, 212, 0, 0,
	0, 117, 0, 210, 188, 249, 0, 190, 209, 156,
	238, 201, 248, 258, 259, 235, 256, 267, 225, 98,
	234, 246, 114, 220, 0, 0, 0, 100, 244, 231,
	167, 145, 146, 99, 0, 206, 122, 130, 119, 180,
	241, 242, 118, 270, 106, 255, 102, 107, 254, 174,
	237, 245, 168, 161, 101, 243, 166, 160, 150, 126,
	138, 198, 158, 199, 139, 171, 170, 172, 0, 0,
	0, 229, 252, 271, 111, 0, 236, 263, 266, 0,
	202, 112, 131, 125, 197, 129, 153, 262, 264, 265,
	173, 108, 141, 226, 149, 157, 205, 269, 187, 211,
	115, 251, 227, 382, 393, 388, 389, 386, 387, 385,
	384, 383, 396, 374, 375, 376, 377, 379, 0, 390,
	391, 378, 94, 103, 154, 268, 203, 128, 253, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 159,
	162, 163, 164, 165, 175, 176, 177, 179, 182, 183,
	184, 185, 186, 189, 191, 192, 193, 194, 195, 196,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 250, 257, 260,
	135, 247, 261, 181, 0, 0, 0, 0, 338, 0,
	0, 0, 123, 0, 337, 0, 0, 0, 152, 0,
	0, 381, 155, 0, 0, 228, 169, 0, 0, 0,
	0, 0, 372, 373, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 91, 92, 93, 359, 358,
	361, 362, 363, 364, 0, 0, 113, 360, 365, 366,
	367, 0, 0, 0, 0, 335, 352, 0, 380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 350,
	0, 0, 0, 0, 395, 0, 351, 0, 0, 344,
	345, 347, 346, 348, 353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 394, 0, 0, 289, 0,
	0, 392, 0, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 0, 0, 0,
	117, 0, 210, 188, 249, 0, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 0, 0,
	229, 252, 271, 111, 0, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 382, 393, 388, 389, 386, 387, 385, 384,
	383, 396, 374, 375, 376, 377, 379, 0, 390, 391,
	378, 94, 103, 154, 268, 203, 128, 253, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 135,
	247, 261, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 152, 0, 0,
	381, 155, 0, 0, 228, 169, 0, 0, 0, 0,
	0, 372, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 359, 358, 361,
	362, 363, 364, 0, 0, 113, 360, 365, 366, 367,
	0, 0, 0, 0, 0, 352, 0, 380, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 350, 0,
	0, 0, 0, 395, 0, 351, 0, 0, 344, 345,
	347, 346, 348, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 394, 0, 0, 289, 0, 0,
	392, 0, 200, 0, 232, 136, 151, 109, 148, 95,
	105, 0, 134, 178, 208, 212, 0, 0, 0, 117,
	0, 210, 188, 249, 1610, 190, 209, 156, 238, 201,
	248, 258, 259, 235, 256, 267, 225, 98, 234, 246,
	114, 220, 0, 0, 0, 100, 244, 231, 167, 145,
	146, 99, 0, 206, 122, 130, 119, 180, 241, 242,
	118, 270, 106, 255, 102, 107, 254, 174, 237, 245,
	168, 161, 101, 243, 166, 160, 150, 126, 138, 198,
	158, 199, 139, 171, 170, 172, 0, 0, 0, 229,
	252, 271, 111, 0, 236, 263, 266, 0, 202, 112,
	131, 125, 197, 129, 153, 262, 264, 265, 173, 108,
	141, 226, 149, 157, 205, 269, 187, 211, 115, 251,
	227, 382, 393, 388, 389, 386, 387, 385, 384, 383,
	396, 374, 375, 376, 377, 379, 0, 390, 391, 378,
	94, 103, 154, 268, 203, 128, 253, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 159, 162, 163,
	164, 165, 175, 176, 177, 179, 182, 183, 184, 185,
	186, 189, 191, 192, 193, 194, 195, 196, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 250, 257, 260, 135, 247,
	261, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 381,
	155, 0, 0, 228, 169, 0, 0, 0, 0, 0,
	372, 373, 0, 0, 0, 0, 0, 0, 0, 0,
	57, 0, 409, 91, 92, 93, 359, 358, 361, 362,
	363, 364, 0, 0, 113, 360, 365, 366, 367, 0,
	0, 0, 0, 0, 352, 0, 380, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 349, 350, 0, 0,
	0, 0, 395, 0, 351, 0, 0, 344, 345, 347,
	346, 348, 353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 394, 0, 0, 289, 0, 0, 392,
	0, 200, 0, 232, 136, 151, 109, 148, 95, 105,
	0, 134, 178, 208, 212, 0, 0, 0, 117, 0,
	210, 188, 249, 0, 190, 209, 156, 238, 201, 248,
	258, 259, 235, 256, 267, 225, 98, 234, 246, 114,
	220, 0, 0, 0, 100, 244, 231, 167, 145, 146,
	99, 0, 206, 122, 130, 119, 180, 241, 242, 118,
	270, 106, 255, 102, 107, 254, 174, 237, 245, 168,
	161, 101, 243, 166, 160, 150, 126, 138, 198, 158,
	199, 139, 171, 170, 172, 0, 0, 0, 229, 252,
	271, 111, 0, 236, 263, 266, 0, 202, 112, 131,
	125, 197, 129, 153, 262, 264, 265, 173, 108, 141,
	226, 149, 157, 205, 269, 187, 211, 115, 251, 227,
	382, 393, 388, 389, 386, 387, 385, 384, 383, 396,
	374, 375, 376, 377, 379, 0, 390, 391, 378, 94,
	103, 154, 268, 203, 128, 253, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 159, 162, 163, 164,
	165, 175, 176, 177, 179, 182, 183, 184, 185, 186,
	189, 191, 192, 193, 194, 195, 196, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 250, 257, 260, 135, 247, 261,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 152, 0, 0, 381, 155,
	0, 0, 228, 169, 0, 0, 0, 0, 0, 372,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 91, 92, 93, 359, 358, 361, 362, 363,
	364, 0, 0, 113, 360, 365, 366, 367, 0, 0,
	0, 0, 0, 352, 0, 380, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 350, 0, 0, 0,
	0, 395, 0, 351, 0, 0, 344, 345, 347, 346,
	348, 353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 394, 0, 0, 289, 0, 0, 392, 0,
	200, 0, 232, 136, 151, 109, 148, 95, 105, 0,
	134, 178, 208, 212, 0, 0, 0, 117, 0, 210,
	188, 249, 0, 190, 209, 156, 238, 201, 248, 258,
	259, 235, 256, 267, 225, 98, 234, 246, 114, 220,
	0, 0, 0, 100, 244, 231, 167, 145, 146, 99,
	0, 206, 122, 130, 119, 180, 241, 242, 118, 270,
	106, 255, 102, 107, 254, 174, 237, 245, 168, 161,
	101, 243, 166, 160, 150, 126, 138, 198, 158, 199,
	139, 171, 170, 172, 0, 0, 0, 229, 252, 271,
	111, 0, 236, 263, 266, 0, 202, 112, 131, 125,
	197, 129, 153, 262, 264, 265, 173, 108, 141, 226,
	149, 157, 205, 269, 187, 211, 115, 251, 227, 382,
	393, 388, 389, 386, 387, 385, 384, 383, 396, 374,
	375, 376, 377, 379, 0, 390, 391, 378, 94, 103,
	154, 268, 203, 128, 253, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 159, 162, 163, 164, 165,
	175, 176, 177, 179, 182, 183, 184, 185, 186, 189,
	191, 192, 193, 194, 195, 196, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 250, 257, 260, 135, 247, 261, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 155, 0,
	0, 228, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	658, 657, 667, 668, 660, 661, 662, 663, 664, 665,
	666, 659, 0, 0, 669, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 289, 0, 0, 0, 0, 200,
	0, 232, 136, 151, 109, 148, 95, 105, 0, 134,
	178, 208, 212, 0, 0, 0, 117, 0, 210, 188,
	249, 0, 190, 209, 156, 238, 201, 248, 258, 259,
	235, 256, 267, 225, 98, 234, 246, 114, 220, 0,
	0, 0, 100, 244, 231, 167, 145, 146, 99, 0,
	206, 122, 130, 119, 180, 241, 242, 118, 270, 106,
	255, 102, 107, 254, 174, 237, 245, 168, 161, 101,
	243, 166, 160, 150, 126, 138, 198, 158, 199, 139,
	171, 170, 172, 0, 0, 0, 229, 252, 271, 111,
	0, 236, 263, 266, 0, 202, 112, 131, 125, 197,
	129, 153, 262, 264, 265, 173, 108, 141, 226, 149,
	157, 205, 269, 187, 211, 115, 251, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 154,
	268, 203, 128, 253, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 159, 162, 163, 164, 165, 175,
	176, 177, 179, 182, 183, 184, 185, 186, 189, 191,
	192, 193, 194, 195, 196, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 250, 257, 260, 135, 247, 261, 181, 0,
	0, 0, 753, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 155, 0, 0,
	228, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 755, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 647, 648, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 649, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 289, 0, 0, 0, 0, 200, 0,
	232, 136, 151, 109, 148, 95, 105, 0, 134, 178,
	208, 212, 0, 0, 0, 117, 0, 210, 188, 249,
	0, 190, 209, 156, 238, 201, 248, 258, 259, 235,
	256, 267, 225, 98, 234, 246, 114, 220, 0, 0,
	0, 100, 244, 231, 167, 145, 146, 99, 0, 206,
	122, 130, 119, 180, 241, 242, 118, 270, 106, 255,
	102, 107, 254, 174, 237, 245, 168, 161, 101, 243,
	166, 160, 150, 126, 138, 198, 158, 199, 139, 171,
	170, 172, 0, 0, 0, 229, 252, 271, 111, 0,
	236, 263, 266, 0, 202, 112, 131, 125, 197, 129,
	153, 262, 264, 265, 173, 108, 141, 226, 149, 157,
	205, 269, 187, 211, 115, 251, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 154, 268,
	203, 128, 253, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 159, 162, 163, 164, 165, 175, 176,
	177, 179, 182, 183, 184, 185, 186, 189, 191, 192,
	193, 194, 195, 196, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 250, 257, 260, 135, 247, 261, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 155, 0, 0, 228,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 85,
	86, 0, 82, 0, 0, 0, 87, 200, 0, 232,
	136, 151, 109, 148, 95, 105, 0, 134, 178, 208,
	212, 0, 0, 0, 117, 0, 210, 188, 249, 0,
	190, 209, 156, 238, 201, 248, 258, 259, 235, 256,
	267, 225, 98, 234, 246, 114, 220, 0, 0, 0,
	100, 244, 231, 167, 145, 146, 99, 0, 206, 122,
	130, 119, 180, 241, 242, 118, 270, 106, 255, 102,
	107, 254, 174, 237, 245, 168, 161, 101, 243, 166,
	160, 150, 126, 138, 198, 158, 199, 139, 171, 170,
	172, 0, 0, 0, 229, 252, 271, 111, 0, 236,
	263, 266, 0, 202, 112, 131, 125, 197, 129, 153,
	262, 264, 265, 173, 108, 141, 226, 149, 157, 205,
	269, 187, 211, 115, 251, 227, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 154, 268, 203,
	128, 253, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 159, 162, 163, 164, 165, 175, 176, 177,
	179, 182, 183, 184, 185, 186, 189, 191, 192, 193,
	194, 195, 196, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	250, 257, 260, 135, 247, 261, 181, 0, 0, 0,
	1026, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 155, 0, 0, 228, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 1028, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 289, 0, 0, 0, 0, 200, 0, 232, 136,
	151, 109, 148, 95, 105, 0, 134, 178, 208, 212,
	0, 0, 0, 117, 0, 210, 188, 249, 0, 190,
	209, 156, 238, 201, 248, 258, 259, 235, 256, 267,
	225, 98, 234, 246, 114, 220, 0, 0, 0, 100,
	244, 231, 167, 145, 146, 99, 0, 206, 122, 130,
	119, 180, 241, 242, 118, 270, 106, 255, 102, 107,
	254, 174, 237, 245, 168, 161, 101, 243, 166, 160,
	150, 126, 138, 198, 158, 199, 139, 171, 170, 172,
	0, 0, 0, 229, 252, 271, 111, 0, 236, 263,
	266, 0, 202, 112, 131, 125, 197, 129, 153, 262,
	264, 265, 173, 108, 141, 226, 149, 157, 205, 269,
	187, 211, 115, 251, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 154, 268, 203, 128,
	253, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 159, 162, 163, 164, 165, 175, 176, 177, 179,
	182, 183, 184, 185, 186, 189, 191, 192, 193, 194,
	195, 196, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 250,
	257, 260, 135, 247, 261, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	0, 0, 152, 0, 0, 0, 155, 0, 0, 228,
	169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 57, 0, 0, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 0,
	0, 0, 289, 0, 0, 0, 0, 200, 0, 232,
	136, 151, 109, 148, 95, 105, 0, 134, 178, 208,
	212, 0, 0, 0, 117, 0, 210, 188, 249, 0,
	190, 209, 156, 238, 201, 248, 258, 259, 235, 256,
	267, 225, 98, 234, 246, 114, 220, 0, 0, 0,
	100, 244, 231, 167, 145, 146, 99, 0, 206, 122,
	130, 119, 180, 241, 242, 118, 270, 106, 255, 102,
	107, 254, 174, 237, 245, 168, 161, 101, 243, 166,
	160, 150, 126, 138, 198, 158, 199, 139, 171, 170,
	172, 0, 0, 0, 229, 252, 271, 111, 0, 236,
	263, 266, 0, 202, 112, 131, 125, 197, 129, 153,
	262, 264, 265, 173, 108, 141, 226, 149, 157, 205,
	269, 187, 211, 115, 251, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 103, 154, 268, 203,
	128, 253, 0, 0, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 104,
	110, 116, 120, 124, 127, 133, 137, 140, 142, 143,
	144, 147, 159, 162, 163, 164, 165, 175, 176, 177,
	179, 182, 183, 184, 185, 186, 189, 191, 192, 193,
	194, 195, 196, 204, 207, 213, 214, 215, 216, 217,
	218, 219, 221, 222, 223, 224, 230, 233, 239, 240,
	250, 257, 260, 135, 247, 261, 181, 0, 0, 0,
	1026, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 152, 0, 0, 0, 155, 0, 0, 228, 169,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 0, 1028, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
	0, 289, 0, 0, 0, 0, 200, 0, 232, 136,
	151, 109, 148, 95, 105, 0, 134, 178, 208, 212,
	0, 0, 0, 117, 0, 210, 188, 249, 0, 1024,
	209, 156, 238, 201, 248, 258, 259, 235, 256, 267,
	225, 98, 234, 246, 114, 220, 0, 0, 0, 100,
	244, 231, 167, 145, 146, 99, 0, 206, 122, 130,
	119, 180, 241, 242, 118, 270, 106, 255, 102, 107,
	254, 174, 237, 245, 168, 161, 101, 243, 166, 160,
	150, 126, 138, 198, 158, 199, 139, 171, 170, 172,
	0, 0, 0, 229, 252, 271, 111, 0, 236, 263,
	266, 0, 202, 112, 131, 125, 197, 129, 153, 262,
	264, 265, 173, 108, 141, 226, 149, 157, 205, 269,
	187, 211, 115, 251, 227, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 103, 154, 268, 203, 128,
	253, 0, 0, 121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 104, 110,
	116, 120, 124, 127, 133, 137, 140, 142, 143, 144,
	147, 159, 162, 163, 164, 165, 175, 176, 177, 179,
	182, 183, 184, 185, 186, 189, 191, 192, 193, 194,
	195, 196, 204, 207, 213, 214, 215, 216, 217, 218,
	219, 221, 222, 223, 224, 230, 233, 239, 240, 250,
	257, 260, 135, 247, 261, 181, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	152, 0, 0, 0, 155, 0, 0, 228, 169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	0, 0, 992, 0, 0, 993, 0, 0, 113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 132, 0, 0, 0,
	289, 0, 0, 0, 0, 200, 0, 232, 136, 151,
	109, 148, 95, 105, 0, 134, 178, 208, 212, 0,
	0, 0, 117, 0, 210, 188, 249, 0, 190, 209,
	156, 238, 201, 248, 258, 259, 235, 256, 267, 225,
	98, 234, 246, 114, 220, 0, 0, 0, 100, 244,
	231, 167, 145, 146, 99, 0, 206, 122, 130, 119,
	180, 241, 242, 118, 270, 106, 255, 102, 107, 254,
	174, 237, 245, 168, 161, 101, 243, 166, 160, 150,
	126, 138, 198, 158, 199, 139, 171, 170, 172, 0,
	0, 0, 229, 252, 271, 111, 0, 236, 263, 266,
	0, 202, 112, 131, 125, 197, 129, 153, 262, 264,
	265, 173, 108, 141, 226, 149, 157, 205, 269, 187,
	211, 115, 251, 227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 103, 154, 268, 203, 128, 253,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 104, 110, 116,
	120, 124, 127, 133, 137, 140, 142, 143, 144, 147,
	159, 162, 163, 164, 165, 175, 176, 177, 179, 182,
	183, 184, 185, 186, 189, 191, 192, 193, 194, 195,
	196, 204, 207, 213, 214, 215, 216, 217, 218, 219,
	221, 222, 223, 224, 230, 233, 239, 240, 250, 257,
	260, 135, 247, 261, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 788, 0, 0, 0, 152,
	0, 0, 0, 155, 0, 0, 228, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	787, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 289,
	0, 0, 0, 0, 200, 0, 232, 136, 151, 109,
	148, 95, 105, 0, 134, 178, 208, 212, 0, 0,
	0, 117, 0, 210, 188, 249, 0, 190, 209, 156,
	238, 201, 248, 258, 259, 235, 256, 267, 225, 98,
	234, 246, 114, 220, 0, 0, 0, 100, 244, 231,
	167, 145, 146, 99, 0, 206, 122, 130, 119, 180,
	241, 242, 118, 270, 106, 255, 102, 107, 254, 174,
	237, 245, 168, 161, 101, 243, 166, 160, 150, 126,
	138, 198, 158, 199, 139, 171, 170, 172, 0, 0,
	0, 229, 252, 271, 111, 0, 236, 263, 266, 0,
	202, 112, 131, 125, 197, 129, 153, 262, 264, 265,
	173, 108, 141, 226, 149, 157, 205, 269, 187, 211,
	115, 251, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 154, 268, 203, 128, 253, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 159,
	162, 163, 164, 165, 175, 176, 177, 179, 182, 183,
	184, 185, 186, 189, 191, 192, 193, 194, 195, 196,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 250, 257, 260,
	135, 247, 261, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 155, 0, 0, 228, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 409, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 132, 0, 0, 0, 289, 0,
	0, 0, 0, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 0, 0, 0,
	117, 0, 210, 188, 249, 0, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 0, 0,
	229, 252, 271, 111, 0, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 154, 268, 203, 128, 253, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 135,
	247, 261, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 155, 0, 0, 228, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 289, 0, 0,
	0, 0, 200, 0, 232, 136, 151, 109, 148, 95,
	105, 0, 134, 178, 208, 212, 0, 0, 0, 117,
	0, 210, 188, 249, 0, 190, 209, 156, 238, 201,
	248, 258, 259, 235, 256, 267, 225, 98, 234, 246,
	114, 220, 0, 0, 0, 100, 244, 231, 167, 145,
	146, 99, 0, 206, 122, 130, 119, 180, 241, 242,
	118, 270, 106, 255, 102, 107, 254, 174, 237, 245,
	168, 161, 101, 243, 166, 160, 150, 126, 138, 198,
	158, 199, 139, 171, 170, 172, 0, 0, 0, 229,
	252, 271, 111, 0, 236, 263, 266, 0, 202, 112,
	131, 125, 197, 129, 153, 262, 264, 265, 173, 108,
	141, 226, 149, 157, 205, 269, 187, 211, 115, 251,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 154, 268, 203, 128, 253, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 159, 162, 163,
	164, 165, 175, 176, 177, 179, 182, 183, 184, 185,
	186, 189, 191, 192, 193, 194, 195, 196, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 250, 257, 260, 135, 247,
	261, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	155, 0, 0, 228, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 1028, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 289, 0, 0, 0,
	0, 200, 0, 232, 136, 151, 109, 148, 95, 105,
	0, 134, 178, 208, 212, 0, 0, 0, 117, 0,
	210, 188, 249, 0, 190, 209, 156, 238, 201, 248,
	258, 259, 235, 256, 267, 225, 98, 234, 246, 114,
	220, 0, 0, 0, 100, 244, 231, 167, 145, 146,
	99, 0, 206, 122, 130, 119, 180, 241, 242, 118,
	270, 106, 255, 102, 107, 254, 174, 237, 245, 168,
	161, 101, 243, 166, 160, 150, 126, 138, 198, 158,
	199, 139, 171, 170, 172, 0, 0, 0, 229, 252,
	271, 111, 0, 236, 263, 266, 0, 202, 112, 131,
	125, 197, 129, 153, 262, 264, 265, 173, 108, 141,
	226, 149, 157, 205, 269, 187, 211, 115, 251, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 154, 268, 203, 128, 253, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 159, 162, 163, 164,
	165, 175, 176, 177, 179, 182, 183, 184, 185, 186,
	189, 191, 192, 193, 194, 195, 196, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 250, 257, 260, 135, 247, 261,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 0, 152, 0, 0, 0, 155,
	0, 0, 228, 169, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 0, 755, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 132, 0, 0, 0, 289, 0, 0, 0, 0,
	200, 0, 232, 136, 151, 109, 148, 95, 105, 0,
	134, 178, 208, 212, 0, 0, 0, 117, 0, 210,
	188, 249, 0, 190, 209, 156, 238, 201, 248, 258,
	259, 235, 256, 267, 225, 98, 234, 246, 114, 220,
	0, 0, 0, 100, 244, 231, 167, 145, 146, 99,
	0, 206, 122, 130, 119, 180, 241, 242, 118, 270,
	106, 255, 102, 107, 254, 174, 237, 245, 168, 161,
	101, 243, 166, 160, 150, 126, 138, 198, 158, 199,
	139, 171, 170, 172, 0, 0, 0, 229, 252, 271,
	111, 0, 236, 263, 266, 0, 202, 112, 131, 125,
	197, 129, 153, 262, 264, 265, 173, 108, 141, 226,
	149, 157, 205, 269, 187, 211, 115, 251, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 103,
	154, 268, 203, 128, 253, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 104, 110, 116, 120, 124, 127, 133, 137,
	140, 142, 143, 144, 147, 159, 162, 163, 164, 165,
	175, 176, 177, 179, 182, 183, 184, 185, 186, 189,
	191, 192, 193, 194, 195, 196, 204, 207, 213, 214,
	215, 216, 217, 218, 219, 221, 222, 223, 224, 230,
	233, 239, 240, 250, 257, 260, 135, 247, 261, 181,
	0, 0, 0, 0, 0, 0, 0, 758, 123, 0,
	0, 0, 0, 0, 152, 0, 0, 0, 155, 0,
	0, 228, 169, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 289, 0, 0, 0, 0, 200,
	0, 232, 136, 151, 109, 148, 95, 105, 0, 134,
	178, 208, 212, 0, 0, 0, 117, 0, 210, 188,
	249, 0, 190, 209, 156, 238, 201, 248, 258, 259,
	235, 256, 267, 225, 98, 234, 246, 114, 220, 0,
	0, 0, 100, 244, 231, 167, 145, 146, 99, 0,
	206, 122, 130, 119, 180, 241, 242, 118, 270, 106,
	255, 102, 107, 254, 174, 237, 245, 168, 161, 101,
	243, 166, 160, 150, 126, 138, 198, 158, 199, 139,
	171, 170, 172, 0, 0, 0, 229, 252, 271, 111,
	0, 236, 263, 266, 0, 202, 112, 131, 125, 197,
	129, 153, 262, 264, 265, 173, 108, 141, 226, 149,
	157, 205, 269, 187, 211, 115, 251, 227, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 103, 154,
	268, 203, 128, 253, 0, 0, 121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 104, 110, 116, 120, 124, 127, 133, 137, 140,
	142, 143, 144, 147, 159, 162, 163, 164, 165, 175,
	176, 177, 179, 182, 183, 184, 185, 186, 189, 191,
	192, 193, 194, 195, 196, 204, 207, 213, 214, 215,
	216, 217, 218, 219, 221, 222, 223, 224, 230, 233,
	239, 240, 250, 257, 260, 135, 247, 261, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 152, 0, 0, 0, 155, 0, 0,
	228, 169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 0, 636, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 289, 0, 0, 0, 0, 200, 0,
	232, 136, 151, 109, 148, 95, 105, 0, 134, 178,
	208, 212, 0, 0, 0, 117, 0, 210, 188, 249,
	0, 190, 209, 156, 238, 201, 248, 258, 259, 235,
	256, 267, 225, 98, 234, 246, 114, 220, 0, 0,
	0, 100, 244, 231, 167, 145, 146, 99, 0, 206,
	122, 130, 119, 180, 241, 242, 118, 270, 106, 255,
	102, 107, 254, 174, 237, 245, 168, 161, 101, 243,
	166, 160, 150, 126, 138, 198, 158, 199, 139, 171,
	170, 172, 0, 0, 0, 229, 252, 271, 111, 0,
	236, 263, 266, 0, 202, 112, 131, 125, 197, 129,
	153, 262, 264, 265, 173, 108, 141, 226, 149, 157,
	205, 269, 187, 211, 115, 251, 227, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 103, 154, 268,
	203, 128, 253, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	104, 110, 116, 120, 124, 127, 133, 137, 140, 142,
	143, 144, 147, 159, 162, 163, 164, 165, 175, 176,
	177, 179, 182, 183, 184, 185, 186, 189, 191, 192,
	193, 194, 195, 196, 204, 207, 213, 214, 215, 216,
	217, 218, 219, 221, 222, 223, 224, 230, 233, 239,
	240, 250, 257, 260, 135, 247, 261, 426, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 0, 152,
	0, 0, 0, 155, 0, 0, 228, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 132, 0, 0, 0, 289,
	0, 0, 0, 0, 200, 0, 232, 136, 151, 109,
	148, 95, 105, 0, 134, 178, 208, 212, 0, 0,
	0, 117, 0, 210, 188, 249, 0, 190, 209, 156,
	238, 201, 248, 258, 259, 235, 256, 267, 225, 98,
	234, 246, 114, 220, 0, 0, 0, 100, 244, 231,
	167, 145, 146, 99, 0, 206, 122, 130, 119, 180,
	241, 242, 118, 270, 106, 255, 102, 107, 254, 174,
	237, 245, 168, 161, 101, 243, 166, 160, 150, 126,
	138, 198, 158, 199, 139, 171, 170, 172, 0, 0,
	0, 229, 252, 271, 111, 0, 236, 263, 266, 0,
	202, 112, 131, 125, 197, 129, 153, 262, 264, 265,
	173, 108, 141, 226, 149, 157, 205, 269, 187, 211,
	115, 251, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 103, 154, 268, 203, 128, 253, 0,
	0, 121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 104, 110, 116, 120,
	124, 127, 133, 137, 140, 142, 143, 144, 147, 159,
	162, 163, 164, 165, 175, 176, 177, 179, 182, 183,
	184, 185, 186, 189, 191, 192, 193, 194, 195, 196,
	204, 207, 213, 214, 215, 216, 217, 218, 219, 221,
	222, 223, 224, 230, 233, 239, 240, 250, 257, 260,
	135, 247, 261, 181, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 0, 0, 0, 0, 152, 0,
	0, 0, 155, 0, 0, 228, 169, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 132, 0, 0, 0, 289, 0,
	0, 0, 0, 200, 0, 232, 136, 151, 109, 148,
	95, 105, 0, 134, 178, 208, 212, 0, 0, 0,
	117, 0, 210, 188, 249, 0, 190, 209, 156, 238,
	201, 248, 258, 259, 235, 256, 267, 225, 98, 234,
	246, 114, 220, 0, 0, 0, 100, 244, 231, 167,
	145, 146, 99, 0, 206, 122, 130, 119, 180, 241,
	242, 118, 270, 106, 255, 102, 107, 254, 174, 237,
	245, 168, 161, 101, 243, 166, 160, 150, 126, 138,
	198, 158, 199, 139, 171, 170, 172, 0, 0, 0,
	229, 252, 271, 111, 0, 236, 263, 266, 0, 202,
	112, 131, 125, 197, 129, 153, 262, 264, 265, 173,
	108, 141, 226, 149, 157, 205, 269, 187, 211, 115,
	251, 227, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 103, 154, 268, 203, 128, 253, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 104, 110, 116, 120, 124,
	127, 133, 137, 140, 142, 143, 144, 147, 159, 162,
	163, 164, 165, 175, 176, 177, 179, 182, 183, 184,
	185, 186, 189, 191, 192, 193, 194, 195, 196, 204,
	207, 213, 214, 215, 216, 217, 218, 219, 221, 222,
	223, 224, 230, 233, 239, 240, 250, 257, 260, 325,
	247, 261, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 0, 0, 0, 0, 152, 0, 0,
	0, 155, 0, 0, 228, 169, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 132, 0, 284, 0, 289, 0, 0,
	0, 0, 200, 0, 232, 136, 151, 109, 148, 95,
	105, 0, 134, 178, 208, 212, 0, 0, 0, 117,
	0, 210, 188, 249, 0, 190, 209, 156, 238, 201,
	248, 258, 259, 235, 256, 267, 225, 98, 234, 246,
	114, 220, 0, 0, 0, 100, 244, 231, 167, 145,
	146, 99, 0, 206, 122, 130, 119, 180, 241, 242,
	118, 270, 106, 255, 102, 107, 254, 174, 237, 245,
	168, 161, 101, 243, 166, 160, 150, 126, 138, 198,
	158, 199, 139, 171, 170, 172, 0, 0, 0, 229,
	252, 271, 111, 0, 236, 263, 266, 0, 202, 112,
	131, 125, 197, 129, 153, 262, 264, 265, 173, 108,
	141, 226, 149, 157, 205, 269, 187, 211, 115, 251,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 103, 154, 268, 203, 128, 253, 0, 0, 121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 104, 110, 116, 120, 124, 127,
	133, 137, 140, 142, 143, 144, 147, 159, 162, 163,
	164, 165, 175, 176, 177, 179, 182, 183, 184, 185,
	186, 189, 191, 192, 193, 194, 195, 196, 204, 207,
	213, 214, 215, 216, 217, 218, 219, 221, 222, 223,
	224, 230, 233, 239, 240, 250, 257, 260, 135, 247,
	261, 181, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 0, 0, 152, 0, 0, 0,
	155, 0, 0, 228, 169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 289, 0, 0, 0,
	0, 200, 0, 232, 136, 151, 109, 148, 95, 105,
	0, 134, 178, 208, 212, 0, 0, 0, 117, 0,
	210, 188, 249, 0, 190, 209, 156, 238, 201, 248,
	258, 259, 235, 256, 267, 225, 98, 234, 246, 114,
	220, 0, 0, 0, 100, 244, 231, 167, 145, 146,
	99, 0, 206, 122, 130, 119, 180, 241, 242, 118,
	270, 106, 255, 102, 107, 254, 174, 237, 245, 168,
	161, 101, 243, 166, 160, 150, 126, 138, 198, 158,
	199, 139, 171, 170, 172, 0, 0, 0, 229, 252,
	271, 111, 0, 236, 263, 266, 0, 202, 112, 131,
	125, 197, 129, 153, 262, 264, 265, 173, 108, 141,
	226, 149, 157, 205, 269, 187, 211, 115, 251, 227,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	103, 154, 268, 203, 128, 253, 0, 0, 121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 104, 110, 116, 120, 124, 127, 133,
	137, 140, 142, 143, 144, 147, 159, 162, 163, 164,
	165, 175, 176, 177, 179, 182, 183, 184, 185, 186,
	189, 191, 192, 193, 194, 195, 196, 204, 207, 213,
	214, 215, 216, 217, 218, 219, 221, 222, 223, 224,
	230, 233, 239, 240, 250, 257, 260, 135, 247, 261,
}
var yyPact = [...]int{

	1676, -1000, -277, 1017, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 979, 812, -1000,
	-1000, -1000, -1000, -1000, -1000, 282, 12329, 1, 142, -14,
	17234, 141, 2129, 17583, -1000, 31, -1000, 22, 17583, 27,
	16885, -1000, -1000, -68, -70, -1000, 10235, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 755, 959, 967, 970, 619,
	946, -1000, 8827, 108, 108, 16536, 7431, -1000, -1000, 375,
	17583, 131, 17583, -151, 104, 104, 104, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 139, 17583, 640, 640, 210, -1000, 17583, 92,
	640, 92, 92, 92, 17583, -1000, 183, -1000, -1000, -1000,
	17583, 640, 914, 372, 82, 225, 225, 225, -1000, 193,
	-1000, 4897, 40, 4897, -65, 987, 37, -19, -1000, 372,
	4897, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 119,
	-1000, -1000, 17583, 16180, 146, 301, -1000, -1000, -1000, -1000,
	-1000, -1000, 594, 461, -1000, 10235, 1883, 725, 725, -1000,
	-1000, 156, -1000, -1000, 11282, 11282, 11282, 11282, 11282, 11282,
	11282, 11282, 11282, 11282, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 725, 181,
	-1000, 9886, 725, 725, 725, 725, 725, 725, 725, 725,
	10235, 725, 725, 725, 725, 725, 725, 725, 725, 725,
	725, 725, 725, 725, 725, 725, 725, -1000, -1000, 979,
	-1000, 812, -1000, -1000, -1000, 934, 10235, 10235, 979, -1000,
	881, 8827, -1000, -1000, 928, -1000, -1000, -1000, -1000, 331,
	1001, -1000, 11980, 180, 15831, 14784, 17583, 727, 692, -1000,
	-1000, 179, 726, 7069, -89, -1000, -1000, -1000, 299, 14086,
	-1000, -1000, -1000, 913, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 666, 17583, -1000, 2424, -1000, 640,
	4897, 122, 640, 312, 640, 17583, 17583, 4897, 4897, 4897,
	49, 83, 77, 17583, 715, 117, 17583, 952, 826, 17583,
	640, 640, -1000, 6345, -1000, 4897, 372, -1000, 440, 10235,
	4897, 4897, 4897, 17583, 4897, 4897, -1000, 437, -1000, -1000,
	323, -1000, -1000, -1000, -1000, -1000, -1000, 4897, 4897, -1000,
	995, 306, -1000, -1000, -1000, -1000, 10235, 225, -1000, 825,
	-1000, -1000, 26, -1000, -1000, -1000, -1000, -1000, 1017, -1000,
	-1000, -1000, -130, -1000, -1000, 10235, 10235, 10235, 10235, 419,
	227, 11282, 512, 230, 11282, 11282, 11282, 11282, 11282, 11282,
	11282, 11282, 11282, 11282, 11282, 11282, 11282, 11282, 11282, 621,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 640, -1000,
	996, 669, 669, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 11631, 7780, 6345, 619, 664, 979, 8827, 8827,
	10235, 10235, 9525, 9176, 8827, 927, 246, 461, 17583, -1000,
	-1000, 10933, -1000, -1000, -1000, -1000, -1000, 462, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 17583, 17583, 8827, 8827, 8827,
	8827, 8827, 967, 619, 928, -1000, 1012, 220, 567, 711,
	-1000, 564, 967, 13737, 728, -1000, 928, -1000, -1000, -1000,
	17583, -1000, -1000, 15482, -1000, -1000, 5983, 60, 17583, -1000,
	639, 864, -1000, -1000, -1000, 955, 13039, 13388, 60, 539,
	14784, 17583, -1000, -1000, 14784, 17583, 5621, 6707, -89, -1000,
	688, -1000, -101, -94, 8129, 196, -1000, -1000, -1000, -1000,
	4535, 500, 515, 417, -54, -1000, -1000, -1000, 732, -1000,
	732, 732, 732, 732, -17, -17, -17, -17, -1000, -1000,
	-1000, -1000, -1000, 752, 749, -1000, 732, 732, 732, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 748, 748, 748,
	737, 737, 779, -1000, 17583, 4897, 950, 4897, -1000, 106,
	-1000, -1000, -1000, 17583, 17583, 17583, 17583, 17583, 158, 17583,
	17583, 706, -1000, 17583, 4897, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 461, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 17583, -1000, -1000, -1000, -1000, 17583, 372, 17583, 17583,
	461, -1000, 17583, 17583, -1000, -1000, -1000, -1000, -1000, 461,
	227, 441, 337, -1000, -1000, 490, -1000, -1000, 1131, -1000,
	-1000, -1000, -1000, 512, 11282, 11282, 11282, 242, 1131, 1944,
	340, 507, 197, 300, 300, 195, 195, 195, 195, 195,
	356, 356, -1000, -1000, -1000, 462, -1000, -1000, -1000, 462,
	8827, 8827, 705, 725, 178, -1000, 755, -1000, -1000, 967,
	651, 651, 429, 576, 278, 993, 651, 273, 992, 651,
	651, 8827, -1000, -1000, 344, -1000, 10235, 462, -1000, 177,
	-1000, 1213, 697, 695, 651, 462, 462, 651, 651, 934,
	-1000, -1000, 878, 10235, 10235, 10235, -1000, -1000, -1000, 934,
	972, -1000, 904, 898, 986, 8827, 14784, 928, -1000, -1000,
	-1000, 176, 713, 725, -1000, 17583, 14784, 14784, 14784, 14784,
	14784, -1000, 847, 840, -1000, 841, 838, 852, 17583, -1000,
	655, 619, 13039, 185, 725, -1000, 15133, -1000, -1000, 986,
	14784, 617, -1000, 617, -1000, 170, -1000, -1000, 688, -89,
	-103, -1000, -1000, -1000, -1000, 461, -1000, 634, 687, 4173,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 744, 640, -1000,
	931, 229, 254, 640, 924, -1000, -1000, -1000, 917, -1000,
	324, -64, -1000, -1000, 392, -17, -17, -1000, -1000, 196,
	912, 196, 196, 196, 436, 436, -1000, -1000, -1000, -1000,
	374, -1000, -1000, -1000, 368, -1000, 816, 17583, 4897, -1000,
	-1000, -1000, -1000, 394, 394, 224, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 59, 758, -1000,
	-1000, -1000, -1000, 6, 45, 111, -1000, 4897, -1000, 306,
	306, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	242, 1131, 1618, -1000, 11282, 11282, -1000, -1000, 651, 651,
	8827, 6345, 979, 934, -1000, -1000, 68, 621, 68, 11282,
	11282, -1000, 11282, 11282, -1000, -168, 671, 303, -1000, 10235,
	298, -1000, 6345, -1000, 11282, 11282, -1000, -1000, -1000, -1000,
	-1000, -1000, 876, 461, 461, -1000, -1000, 17583, -1000, -1000,
	-1000, -1000, 983, 10235, -1000, 670, -1000, 5259, 815, 17583,
	725, 1017, 13039, 17583, 660, -1000, 277, 864, 743, 813,
	880, -1000, -1000, -1000, -1000, 839, -1000, 822, -1000, -1000,
	-1000, -1000, -1000, 619, -1000, 129, 126, 124, 17583, -1000,
	979, 617, -1000, -1000, 201, -1000, -1000, -127, -109, -1000,
	-1000, -1000, 4535, -1000, 4535, 17583, 76, -1000, 640, 640,
	-1000, -1000, -1000, 740, 798, 11282, -1000, -1000, -1000, 513,
	196, 196, -1000, 310, -1000, -1000, -1000, 649, -1000, 647,
	662, 633, 17583, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17583, -1000, -1000, -1000, -1000, -1000, 17583, -174,
	640, 17583, 17583, 17583, 17583, -1000, 372, 372, -1000, 11282,
	1131, 1131, -1000, -1000, 462, -1000, 967, -1000, 462, 732,
	732, -1000, 732, 737, -1000, 732, 14, 732, -1, 462,
	462, 1800, 1777, 1738, 1565, 725, -163, -1000, 461, 10235,
	-1000, 1533, 444, -1000, -1000, 981, 969, 461, -1000, -1000,
	939, 581, 573, -1000, -1000, 8478, 630, 168, 605, -1000,
	979, 17583, 10235, -1000, -1000, 10235, 733, -1000, 10235, -1000,
	-1000, -1000, 979, 725, 725, 725, 605, 967, -1000, -1000,
	-1000, -1000, 4173, -1000, 591, -1000, 732, -1000, -1000, -1000,
	17583, -48, 1011, 1131, -1000, -1000, -1000, -1000, -1000, -17,
	434, -17, 364, -1000, 354, 4897, -1000, -1000, -1000, -1000,
	942, -1000, 6345, -1000, -1000, 731, 778, -1000, -1000, -1000,
	-1000, 1131, -1000, 934, -1000, -1000, 118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11282, 11282, 11282, 11282, 11282,
	967, 431, 461, 11282, 11282, -1000, 10235, 10235, 923, -1000,
	725, -1000, 724, 17583, 17583, -1000, 17583, 967, -1000, 461,
	461, 17583, 461, 14435, 17583, 17583, 12678, -1000, 171, 17583,
	-1000, 569, -1000, 226, -1000, -135, 196, -1000, 196, 499,
	464, -1000, 725, 653, -1000, 265, 17583, 17583, -1000, -1000,
	-1000, 1213, 1213, 1213, 1213, 88, 462, -1000, 1213, 1213,
	461, 594, 1008, -1000, 725, 1017, 167, -1000, -1000, -1000,
	563, 541, -1000, 541, 541, 185, 171, -1000, 640, 243,
	406, -1000, 72, 17583, 325, 922, -1000, 919, -1000, -1000,
	-1000, -1000, -1000, 57, 6345, 4535, 524, -1000, -1000, -1000,
	-1000, -1000, 462, 55, -178, -1000, -1000, -1000, 17583, 573,
	17583, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346, -1000,
	-1000, 17583, -1000, -1000, 403, -1000, -1000, 509, -1000, 17583,
	-1000, -1000, 758, -1000, 863, -172, -182, 501, -1000, -1000,
	730, -1000, -1000, 57, 894, -174, -1000, 857, -1000, 17583,
	-1000, 56, -1000, -175, 471, 53, -179, 756, 725, -184,
	745, -1000, 991, 10584, -1000, -1000, 1007, 211, 211, 1213,
	462, -1000, -1000, -1000, 80, 423, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1284, 1283, 29, 66, 67, 1280, 1279, 1278, 95,
	93, 92, 1277, 1276, 1268, 1267, 1266, 1265, 1261, 1259,
	1258, 1257, 1255, 1254, 1253, 1252, 1248, 1242, 1227, 1226,
	1224, 1223, 79, 1222, 69, 1219, 1217, 1216, 1214, 1213,
	1208, 1207, 1205, 39, 174, 50, 60, 1202, 57, 1539,
	1199, 65, 59, 103, 1197, 40, 1195, 1186, 78, 1182,
	1181, 53, 1173, 1172, 100, 1170, 87, 1168, 15, 42,
	1166, 1165, 1164, 1163, 75, 164, 1162, 1161, 9, 1157,
	1155, 96, 1149, 62, 28, 8, 27, 24, 1148, 64,
	1147, 12, 1146, 63, 1145, 1144, 1143, 1142, 58, 1141,
	61, 1140, 19, 25, 1138, 7, 72, 34, 23, 10,
	1137, 1134, 18, 88, 52, 73, 1133, 1131, 593, 1130,
	1129, 54, 1127, 1126, 1125, 26, 71, 98, 402, 1124,
	1123, 1122, 1121, 36, 766, 1821, 17, 90, 1120, 1119,
	1118, 2705, 45, 56, 16, 1117, 1113, 1106, 84, 55,
	38, 1105, 1101, 35, 1097, 1095, 1094, 1093, 1091, 1088,
	1087, 120, 1086, 1084, 1082, 31, 20, 1078, 1075, 68,
	33, 1073, 1065, 1060, 46, 70, 1058, 1054, 47, 1053,
	1049, 21, 1046, 1044, 1043, 1042, 1041, 32, 11, 1039,
	14, 1038, 6, 1037, 22, 1036, 2, 1035, 13, 1034,
	3, 0, 1033, 5, 48, 1, 1030, 4, 1029, 1026,
	1025, 1703, 199, 74, 1024, 89,
}
var yyR1 = [...]int{

	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 201,
	201, 201, 20, 3, 3, 3, 3, 2, 2, 8,
	4, 5, 5, 9, 9, 35, 35, 10, 11, 11,
	11, 11, 213, 213, 58, 58, 59, 59, 106, 106,
	12, 13, 13, 115, 115, 114, 114, 114, 116, 116,
	116, 116, 151, 151, 14, 14, 14, 14, 14, 14,
	14, 203, 203, 202, 200, 200, 199, 199, 198, 21,
	183, 185, 185, 184, 184, 184, 184, 175, 154, 154,
	154, 154, 157, 157, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 156, 156, 156, 156, 156, 158, 158,
	158, 158, 158, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 160, 160,
	160, 160, 160, 160, 160, 160, 174, 174, 161, 161,
	169, 169, 170, 170, 170, 167, 167, 168, 168, 171,
	171, 171, 163, 163, 164, 164, 172, 172, 165, 165,
	165, 166, 166, 166, 173, 173, 173, 173, 173, 162,
	162, 176, 176, 193, 193, 192, 192, 192, 182, 182,
	189, 189, 189, 189, 189, 179, 179, 179, 180, 180,
	178, 178, 181, 181, 191, 191, 190, 177, 177, 194,
	194, 194, 194, 206, 207, 205, 205, 205, 205, 205,
	186, 186, 186, 187, 187, 187, 188, 188, 188, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	197, 195, 195, 196, 196, 16, 22, 22, 17, 17,
	17, 17, 17, 18, 18, 23, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 122, 122, 208, 208,
	124, 124, 120, 120, 123, 123, 121, 121, 121, 125,
	125, 125, 126, 126, 152, 152, 152, 25, 25, 27,
	27, 28, 29, 29, 146, 146, 147, 147, 30, 31,
	36, 36, 36, 36, 36, 36, 38, 38, 38, 7,
	7, 7, 7, 37, 37, 37, 6, 6, 26, 26,
	26, 26, 19, 214, 32, 33, 33, 34, 34, 34,
	40, 40, 40, 39, 39, 39, 45, 45, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 44,
	44, 46, 46, 46, 46, 138, 138, 138, 137, 137,
	50, 50, 51, 51, 52, 52, 53, 53, 53, 90,
	67, 67, 105, 105, 107, 107, 54, 54, 54, 54,
	55, 55, 56, 56, 57, 57, 145, 145, 144, 144,
	144, 143, 143, 60, 60, 60, 62, 61, 61, 61,
	61, 63, 63, 65, 65, 64, 64, 66, 68, 68,
	68, 68, 68, 69, 69, 49, 49, 49, 49, 49,
	49, 49, 49, 119, 119, 71, 71, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 82, 82, 82,
	82, 82, 82, 72, 72, 72, 72, 72, 72, 72,
	43, 43, 83, 83, 83, 89, 84, 84, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 79, 79, 79, 79, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 215, 215, 81, 80, 80,
	80, 80, 80, 80, 80, 41, 41, 41, 41, 41,
	150, 150, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 94, 94, 42, 42, 92,
	92, 93, 95, 95, 91, 91, 91, 74, 74, 74,
	74, 74, 74, 74, 74, 76, 76, 76, 96, 96,
	97, 97, 98, 98, 99, 99, 100, 101, 101, 101,
	102, 102, 102, 102, 103, 103, 103, 73, 73, 73,
	73, 104, 104, 104, 104, 108, 108, 85, 85, 87,
	87, 86, 88, 109, 109, 112, 110, 110, 110, 113,
	113, 113, 113, 111, 111, 111, 140, 140, 140, 117,
	117, 127, 127, 128, 128, 118, 118, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 130, 130, 130,
	131, 131, 132, 132, 132, 139, 139, 135, 135, 136,
	136, 141, 141, 142, 142, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 211, 212, 148, 149, 149, 149,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 2, 4, 6, 6, 7, 4, 6, 5,
	8, 1, 3, 7, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 5, 4, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 2, 8, 4, 6, 5,
	5, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 2, 4, 1, 3, 3, 3, 8, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 1, 4, 4, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 6, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 3,
	0, 5, 0, 3, 5, 0, 1, 0, 1, 0,
	1, 2, 0, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 2, 0, 2, 1, 2, 1, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 3, 2, 3, 1, 10,
	11, 11, 12, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 4, 4, 7, 5,
	5, 5, 12, 7, 5, 9, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 3, 3, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 3, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 2, 7,
	2, 3, 4, 3, 7, 5, 4, 2, 4, 4,
	3, 3, 5, 2, 3, 3, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 5, 0, 1, 0, 1, 2, 3,
	0, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 3, 3, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 1,
	2, 3, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	4, 5, 5, 0, 2, 1, 3, 3, 3, 2,
	3, 1, 2, 0, 3, 1, 1, 3, 3, 4,
	4, 5, 3, 4, 5, 6, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 8, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 5,
	4, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 2, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -209, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -4, -211, 6,
	7, -35, 9, 10, 30, -21, 123, 124, 126, 125,
	159, 127, 152, 53, 173, 174, 176, 177, 178, 179,
	-38, 157, 158, 31, 32, 129, 34, 57, 8, 266,
	154, 153, 25, -210, 368, -34, 5, -98, 15, -3,
	-32, -214, -32, -32, -32, -32, -32, -183, -185, 57,
	96, -132, 133, 77, 258, 130, 131, 137, -135, -201,
	-134, 60, 61, 62, 276, 145, 308, 309, 173, 187,
	181, 208, 200, 277, 310, 146, 198, 201, 245, 143,
	311, 228, 235, 71, 176, 254, 312, 155, 196, 192,
	313, 285, 190, 27, 314, 237, 213, 315, 281, 239,
	191, 236, 129, 316, 148, 364, 141, 317, 214, 218,
	318, 246, 319, 320, 321, 185, 186, 322, 144, 248,
	212, 142, 33, 240, 278, 37, 163, 249, 216, 323,
	211, 207, 324, 325, 326, 327, 210, 184, 206, 41,
	220, 219, 221, 244, 203, 328, 329, 330, 149, 331,
	193, 18, 332, 333, 334, 335, 336, 252, 158, 337,
	161, 338, 339, 340, 341, 342, 343, 238, 215, 217,
	138, 165, 234, 280, 344, 250, 189, 345, 150, 162,
	157, 253, 151, 346, 347, 348, 349, 350, 351, 352,
	177, 353, 354, 355, 356, 172, 247, 256, 40, 225,
	357, 183, 140, 358, 174, 169, 230, 204, 164, 359,
	360, 194, 195, 209, 182, 205, 175, 365, 166, 159,
	361, 255, 226, 282, 202, 199, 170, 362, 167, 168,
	363, 366, 241, 231, 242, 243, 232, 171, 279, 251,
	197, 227, -118, 133, 258, 130, 232, 135, 131, 131,
	132, 133, 258, 130, 131, -64, -141, -201, -134, 133,
	131, 114, 201, 245, 123, 229, 240, 241, 237, -124,
	238, 165, -152, 131, -120, 228, 231, 232, 171, -208,
	-201, 239, 247, 246, 233, 243, 242, -141, 175, -146,
	180, -135, 178, -64, -36, 364, 127, -148, -148, 230,
	230, -148, -84, -49, -70, 80, -75, 29, 23, -74,
	-71, -91, -88, -89, 114, 115, 117, 116, 118, 103,
	104, 111, 81, 119, -79, -77, -78, -80, 64, 63,
	72, 65, 66, 67, 68, 73, 74, 75, -135, -141,
	-86, -211, 47, 48, 267, 268, 269, 270, 275, 271,
	83, 36, 257, 265, 264, 263, 261, 262, 259, 260,
	273, 274, 136, 258, 130, 109, 266, -201, -134, -5,
	-4, -211, 6, 20, 21, -102, 17, 16, -212, 59,
	-40, -47, 42, 43, -48, 21, 35, 46, 44, -33,
	-46, 105, -49, -141, -118, -118, 11, -58, -59, -64,
	-66, -141, -110, -151, 175, -113, 247, 246, -136, -111,
	-135, -133, 245, 201, 244, 128, 283, 79, 22, 24,
	223, 82, 114, 16, 83, 113, 267, 123, 51, 284,
	259, 260, 257, 269, 270, 258, 229, 29, 10, 286,
	25, 153, 21, 35, 107, 125, 86, 87, 156, 23,
	154, 75, 289, 19, 54, 11, 13, 290, 291, 14,
	136, 135, 98, 132, 49, 8, 119, 26, 95, 45,
	292, 28, 293, 294, 295, 296, 47, 96, 17, 261,
	262, 31, 297, 275, 160, 109, 52, 38, 80, 298,
	299, 73, 300, 76, 55, 77, 15, 50, 301, 302,
	303, 304, 97, 126, 266, 48, 305, 130, 6, 272,
	30, 152, 46, 306, 131, 85, 273, 274, 134, 74,
	5, 137, 32, 9, 53, 56, 263, 264, 265, 36,
	84, 12, 307, 78, -184, 96, -175, -201, -64, 132,
	-64, 266, -128, 136, -128, -128, 131, -64, -201, -201,
	123, 125, 128, 55, -22, -64, -127, 136, -201, -127,
	-127, -127, -64, 120, -64, -201, 30, -125, 96, 12,
	258, -201, 165, 131, 166, 133, -126, 96, -126, -126,
	-179, 132, 33, 144, -149, -211, -136, 169, 170, -149,
	-123, -122, 235, 236, 230, 234, 12, 170, 230, 168,
	-125, -149, 134, -135, -37, -135, 64, -7, -3, -10,
	-9, -11, 88, -148, -148, 58, 79, 77, 78, 95,
	-49, -72, 98, 80, 96, 97, 82, 100, 99, 110,
	103, 104, 105, 106, 107, 108, 109, 101, 102, 113,
	88, 89, 90, 91, 92, 93, 94, -119, -211, -89,
	-211, 121, 122, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -75, -211, 120, -2, -84, -4, -211, -211,
	-211, -211, -211, -211, -211, -211, -94, -49, -211, -215,
	-81, -211, -215, -81, -215, -81, -215, -211, -215, -81,
	-215, -81, -215, -215, -81, -211, -211, -211, -211, -211,
	-211, -211, -98, -3, -32, -103, 19, 31, -49, -99,
	-100, -49, -98, 38, -44, -46, -48, 42, 43, 70,
	11, -138, -137, 22, -135, 64, 120, -65, 26, -64,
	-51, -52, -53, -54, -67, -90, -211, -64, -64, -58,
	-213, 58, 11, 56, -213, 58, 120, 58, 175, -113,
	-115, -114, 248, 250, 88, -140, -135, 64, 29, 30,
	59, 58, -64, -154, -157, -159, -158, -160, -155, -156,
	198, 199, 114, 202, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 30, 155, 194, 195, 196, 197,
	214, 215, 216, 217, 218, 219, 220, 221, 181, 200,
	277, 182, 183, 184, 185, 186, 187, 189, 190, 191,
	192, 193, -201, -149, 133, -201, 80, -201, -64, -64,
	-149, -149, -149, 167, 167, 131, 131, 172, -64, 58,
	134, -58, 23, 55, -64, -201, -201, -142, -141, -133,
	-149, -125, 64, -49, -149, -149, -149, -64, -149, -149,
	64, -180, 11, 98, -149, -149, 11, -121, 11, 98,
	-49, -126, 55, -147, 178, 212, 365, 366, 367, -49,
	-49, -49, -49, -82, 73, 80, 74, 75, -75, -83,
	-86, -89, 69, 98, 96, 97, 82, -75, -75, -75,
	-75, -75, -75, -75, -75, -75, -75, -75, -75, -75,
	-75, -75, -150, -201, 64, -201, -74, -74, -135, -45,
	21, 35, -44, -136, -142, -133, -34, -212, -212, -98,
	-44, -44, -49, -49, -91, 64, -44, -91, 64, -44,
	-44, -39, 21, 35, -92, -93, 84, -91, -135, -141,
	-212, -75, -135, -135, -44, -45, -45, -44, -44, -102,
	-212, 9, 98, 58, 18, 58, -101, 24, 25, -102,
	-76, -135, 65, 68, -50, 58, 11, -48, -64, -137,
	105, -142, -106, 161, -64, 30, 58, -60, -62, -61,
	-63, 45, 49, 51, 46, 47, 48, 52, -145, 22,
	-51, -3, -211, -144, 161, -143, 22, -141, 64, -106,
	56, -51, -64, -51, -66, -141, 105, -113, -115, 58,
	249, 251, 252, 55, 76, -49, -166, 113, -186, -187,
	-188, -136, 64, 65, -175, -176, -177, -189, 147, -194,
	138, 140, 137, -178, 148, 132, 28, 59, -171, 73,
	80, -167, 226, -161, 57, -161, -161, -161, -161, -165,
	201, -165, -165, -165, 57, 57, -161, -161, -161, -169,
	57, -169, -169, -170, 57, -170, -139, 56, -64, -149,
	23, -149, -129, 128, 125, 126, -197, 124, 223, 201,
	71, 29, 15, 267, 161, 282, -201, 162, -64, -64,
	-64, -64, -64, 128, 125, -64, -64, -64, -149, -64,
	-64, -125, -141, -141, -64, -135, 73, 74, 75, -83,
	-75, -75, -75, -43, 156, 79, -212, -212, -44, -44,
	-211, 120, -5, -102, -212, -212, 58, 56, 22, 11,
	11, -212, 11, 11, -212, -212, -44, -95, -93, 86,
	-49, -212, 120, -212, 58, 58, -212, -212, -212, -212,
	-212, -103, 40, -49, -49, -100, -103, -117, 19, 11,
	36, 36, -69, 12, -46, -51, -48, 120, -73, 30,
	36, -3, -211, -211, -109, -112, -91, -52, -53, -53,
	-52, -53, 45, 45, 45, 50, 45, 50, 45, -61,
	-141, -212, -212, -3, -68, 53, 135, 54, -211, -143,
	-69, -51, -69, -69, 120, -114, -116, 253, 250, 256,
	-201, 64, 58, -188, 88, 57, -201, 28, -178, -178,
	-181, -201, -181, 28, -163, 29, 73, -168, 227, 65,
	-165, -165, -166, 30, -166, -166, -166, -174, 64, -174,
	65, 65, 55, -135, -149, -148, -204, 143, 139, 147,
	148, 141, 60, 61, 62, 132, 28, 138, 140, 161,
	137, -204, -130, -131, 134, 22, 132, 28, 161, -203,
	56, 167, 223, 167, 134, -149, -121, -121, -43, 79,
	-75, -75, -212, -212, -45, -136, -98, -103, -153, 114,
	198, 155, 196, 192, 212, 203, 225, 194, 226, -150,
	-153, -75, -75, -75, -75, 276, -98, 87, -49, 85,
	-136, -75, -75, 41, -64, -96, 13, -49, 105, -108,
	55, -109, -85, -87, -86, -211, -104, -135, -107, -135,
	-69, 58, 88, -56, -55, 55, 56, -57, 55, -55,
	45, 45, -212, 132, 132, 132, -107, -98, -69, 250,
	254, 255, -187, -188, -191, -190, -135, -194, -181, -181,
	57, -164, 55, -75, 59, -166, -166, -201, 114, 59,
	58, 59, 58, 59, 58, -64, -148, -148, -64, -148,
	-135, -200, 279, -202, -201, -135, -135, -135, -64, -125,
	-125, -75, -212, -102, -212, -161, -161, -161, -170, -161,
	186, -161, 186, -212, -212, 19, 19, 19, 19, -211,
	-42, 272, -49, 58, 58, -97, 14, 16, 27, -108,
	58, -212, -212, 58, 120, -212, 58, -98, -112, -49,
	-49, 57, -49, -211, -211, -211, -212, -102, 59, 58,
	-161, -105, -135, -172, 223, 9, -165, 64, -165, 65,
	65, -149, 26, -199, -198, -136, 57, 56, -103, -165,
	-201, -75, -75, -75, -75, -75, -102, 64, -75, -75,
	-49, -84, 28, -87, 36, -3, -135, -135, -135, -102,
	-105, -105, -212, -105, -105, -144, -193, -192, 56, 142,
	71, -190, 59, 58, -173, 138, 28, 137, -78, -166,
	-166, 59, 59, -211, 58, 88, -105, -64, -212, -212,
	-212, -212, -41, 98, 279, -212, -212, -212, 9, -85,
	120, 59, -212, -212, -212, -68, -192, -201, -182, 88,
	64, 150, -135, -162, 71, 28, 28, -195, -196, 161,
	-198, -188, 59, -212, 277, 52, 280, -109, -135, 65,
	-64, 64, -212, 58, -135, -203, 41, 278, 281, 57,
	-196, 36, -200, 41, -105, 163, 279, 59, 164, 280,
	-206, -207, 55, -211, 281, -207, 55, 10, 9, -75,
	160, -205, 151, 146, 149, 30, -205, -212, -212, 145,
	29, 73,
}
var yyDef = [...]int{

	28, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 622, 0, 363,
	363, 363, 363, 363, 363, 0, 692, 675, 0, 0,
	0, 0, -2, 328, 329, 0, 331, -2, 0, 0,
	340, 1005, 1005, 0, 0, 1005, 0, 1003, 45, 46,
	346, 347, 348, 1, 3, 0, 367, 630, 0, 0,
	-2, 365, 0, 675, 675, 0, 0, 74, 75, 0,
	0, 0, 988, 0, 673, 673, 673, 693, 694, 697,
	698, 29, 30, 31, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 0, 0, 0, 0, 0, 676, 0, 671,
	0, 671, 671, 671, 0, 274, 445, 701, 702, 988,
	0, 0, 0, 319, 0, 322, 322, 322, 288, 0,
	290, 1006, 0, 1006, 0, 297, 0, 0, 303, 319,
	1006, 311, 325, 326, 313, 308, 309, 327, 330, 0,
	335, 338, 0, 353, 0, 865, 345, 358, 359, 1005,
	1005, 362, 32, 496, 455, 0, 461, 463, 0, 498,
	499, 500, 501, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 528, 529, 530, 531, 607, 608,
	609, 610, 611, 612, 613, 614, 465, 466, 604, 0,
	652, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 565, 565, 565, 565, 565, 565, 565, 565,
	0, 0, 0, 0, 0, 0, 0, -2, -2, 622,
	41, 0, 363, 368, 369, 634, 0, 0, 622, 1004,
	0, 0, -2, -2, 379, 385, 386, 387, 388, 364,
	0, 391, 395, 0, 0, 0, 0, 0, 0, 54,
	56, 445, 60, 0, 976, 656, -2, -2, 0, 0,
	699, 700, -2, 837, -2, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 0, 0, 93, 0, 91, 0,
	1006, 0, 0, 0, 0, 0, 0, 1006, 1006, 1006,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 275, 1006, 319, 278, 0, 0,
	1006, 1006, 1006, 0, 1006, 1006, 285, 0, 286, 287,
	0, 195, 196, 197, 291, 1007, 1008, 1006, 1006, 293,
	0, 316, 314, 315, 306, 307, 0, 322, 300, 301,
	304, 305, 336, 339, 356, 354, 355, 357, 349, 350,
	351, 352, 0, 360, 361, 0, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	483, 484, 485, 486, 487, 488, 489, 462, 0, 476,
	0, 0, 0, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 0, 376, 0, 0, 0, 622, 0, 0,
	0, 0, 0, 0, 0, 373, 0, 596, 0, 549,
	557, 0, 550, 558, 551, 559, 552, 0, 553, 560,
	554, 561, 555, 556, 562, 0, 0, 0, 376, 376,
	0, 0, 630, 0, 378, 33, 0, 0, 631, 623,
	624, 627, 630, 0, 400, 389, 380, 383, 384, 366,
	0, 392, 396, 0, 398, 399, 0, 58, 0, 444,
	0, 402, 404, 405, 406, 426, 0, 428, -2, 0,
	0, 0, 52, 53, 0, 0, 0, 0, 976, 657,
	62, 63, 0, 0, 0, 171, 666, 667, 668, 664,
	220, 0, 0, 159, 155, 99, 100, 101, 148, 103,
	148, 148, 148, 148, 168, 168, 168, 168, 131, 132,
	133, 134, 135, 0, 0, 118, 148, 148, 148, 122,
	138, 139, 140, 141, 142, 143, 144, 145, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 150, 150, 150,
	152, 152, 695, 77, 0, 1006, 0, 1006, 89, 0,
	234, 236, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 268, 672, 0, 1006, 271, 272, 446, 703, 704,
	276, 277, 320, 321, 279, 280, 281, 282, 283, 284,
	323, 0, 198, 199, 292, 296, 0, 319, 0, 0,
	298, 299, 0, 0, 337, 341, 342, 343, 344, 497,
	456, 457, 458, 460, 477, 0, 479, 481, 467, 468,
	492, 493, 494, 0, 0, 0, 0, 490, 472, 0,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 517, 580, 581, 0, 515, 516, 527, 0,
	0, 0, 377, 605, 0, -2, 0, 495, 651, 630,
	0, 0, 0, 0, 500, 607, 0, 500, 607, 0,
	0, 0, 374, 375, 602, 599, 0, 0, 604, 0,
	566, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	42, 635, 0, 0, 0, 0, 626, 628, 629, 634,
	0, 615, 0, 0, 453, 0, 0, 381, 39, 397,
	393, 0, 0, 0, 443, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 436, 0, 0, 0, 0, 427,
	0, 0, 0, 448, 920, 429, 0, 431, 432, 453,
	0, 453, 55, 453, 57, 0, 447, 658, 61, 0,
	0, 66, 67, 659, 660, 661, 662, 0, 90, 221,
	223, 226, 227, 228, 94, 95, 96, 0, 0, 208,
	0, 0, 202, 202, 0, 200, 201, 92, 162, 160,
	0, 157, 156, 102, 0, 168, 168, 125, 126, 171,
	0, 171, 171, 171, 0, 0, 119, 120, 121, 113,
	0, 114, 115, 116, 0, 117, 0, 0, 1006, 79,
	674, 80, 1005, 0, 0, 687, 235, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 0, 81, 239,
	241, 240, 244, 0, 0, 0, 266, 1006, 270, 316,
	316, 295, 317, 318, 302, 333, 478, 480, 482, 469,
	490, 473, 0, 470, 0, 0, 464, 532, 0, 0,
	376, 0, 622, 634, 536, 537, 0, 0, 0, 0,
	0, 573, 0, 0, 574, 0, 622, 0, 600, 0,
	0, 548, 0, 567, 0, 0, 568, 569, 570, 571,
	572, 35, 0, 632, 633, 625, 34, 0, 669, 670,
	616, 617, 618, 0, 390, 401, 382, 0, 645, 0,
	0, 638, 0, 0, 453, 653, 0, 403, 422, 424,
	0, 419, 434, 435, 437, 0, 439, 0, 441, 442,
	407, 408, 409, 0, 410, 0, 0, 0, 0, 430,
	622, 453, 50, 51, 0, 64, 65, 0, 0, 71,
	172, 173, 0, 224, 0, 0, 0, 190, 202, 202,
	193, 203, 194, 0, 164, 0, 161, 98, 158, 0,
	171, 171, 127, 0, 128, 129, 130, 0, 146, 0,
	0, 0, 0, 696, 78, 229, 1005, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 1005, 0, 1005, 688, 689, 690, 691, 0, 84,
	0, 0, 0, 0, 0, 269, 319, 319, 471, 0,
	491, 474, 533, 534, 0, 606, 630, 37, 0, 148,
	148, 585, 148, 152, 588, 148, 590, 148, 593, 0,
	0, 0, 0, 0, 0, 0, 597, 547, 603, 0,
	605, 0, 0, 636, 36, 620, 0, 454, 394, 43,
	0, 645, 637, 647, 649, 0, 0, 641, 0, 414,
	622, 0, 0, 416, 423, 0, 0, 417, 0, 418,
	438, 440, -2, 0, 0, 0, 0, 630, 49, 68,
	69, 70, 222, 225, 0, 204, 148, 207, 191, 192,
	0, 166, 0, 163, 149, 123, 124, 169, 170, 168,
	0, 168, 0, 153, 0, 1006, 230, 231, 232, 233,
	0, 238, 0, 82, 83, 0, 0, 243, 267, 289,
	294, 475, 535, 634, 538, 582, 168, 586, 587, 589,
	591, 592, 594, 540, 539, 0, 0, 0, 0, 0,
	630, 0, 601, 0, 0, 40, 0, 0, 0, 44,
	0, 650, 0, 0, 0, 59, 0, 630, 654, 655,
	420, 0, 425, 0, 0, 0, 428, 48, 182, 0,
	206, 0, 412, 174, 167, 0, 171, 147, 171, 0,
	0, 76, 0, 85, 86, 0, 0, 0, 38, 583,
	584, 0, 0, 0, 0, 575, 0, 598, 0, 0,
	621, 619, 0, 648, 0, 640, 643, 642, 415, 47,
	0, 0, 450, 0, 0, 448, 181, 183, 0, 188,
	0, 205, 0, 0, 179, 0, 176, 178, 165, 136,
	137, 151, 154, 0, 0, 0, 0, 245, 541, 543,
	542, 544, 0, 0, 0, 546, 563, 564, 0, 639,
	0, 421, 449, 451, 452, 411, 184, 185, 0, 189,
	187, 0, 413, 97, 0, 175, 177, 0, 261, 0,
	87, 88, 81, 545, 0, 0, 0, 646, 644, 186,
	0, 180, 260, 0, 0, 84, 576, 0, 579, 0,
	262, 0, 242, 577, 0, 0, 0, 209, 0, 0,
	210, 211, 0, 0, 578, 212, 0, 0, 0, 0,
	0, 213, 215, 216, 0, 0, 214, 263, 264, 217,
	218, 219,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 368,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:339
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:344
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:345
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:349
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:376
		{
			setParseTree(yylex, nil)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:382
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:386
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:390
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:396
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:402
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:410
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:414
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:418
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:441
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:455
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:463
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:480
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:492
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:504
		{
			yyVAL.str = InsertStr
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:508
		{
			yyVAL.str = ReplaceStr
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:514
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:520
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:524
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:528
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:532
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:537
		{
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:542
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:546
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:552
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:556
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:561
		{
			yyVAL.partitions = nil
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:565
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:571
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:577
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:581
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:587
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:591
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:597
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:601
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:605
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			yyVAL.str = RepeatableRead
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:615
		{
			yyVAL.str = ReadCommitted
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:619
		{
			yyVAL.str = ReadUncommitted
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:623
		{
			yyVAL.str = Serializable
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:629
		{
			yyVAL.str = SessionStr
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:633
		{
			yyVAL.str = GlobalStr
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:639
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:644
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:650
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:655
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:659
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:663
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:667
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:672
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:682
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:687
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:692
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:698
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:703
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:709
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:715
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:733
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:739
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:744
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:752
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:758
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:769
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:780
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:785
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:791
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:795
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:803
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:807
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:811
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:962
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:966
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:985
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.sqlVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:999
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1003
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1011
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1015
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1021
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1033
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1038
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1061
		{
			yyVAL.optVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1065
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1070
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1074
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1092
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1096
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1101
		{
			yyVAL.str = ""
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.colKeyOpt = colKey
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1130
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1135
		{
			yyVAL.sqlVal = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1145
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1149
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1155
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1159
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1169
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1174
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1180
		{
			yyVAL.str = ""
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1184
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1190
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1194
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1198
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1206
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1212
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1216
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1220
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1227
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1237
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1241
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = ""
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1256
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1260
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1266
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1272
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1276
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1283
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 210:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1287
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1291
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1295
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1301
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1307
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1317
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1321
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1325
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1329
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1334
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1350
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1354
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1358
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1390
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1395
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1400
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1404
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1428
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 243:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1459
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1469
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1473
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1502
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1508
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1512
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1518
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1522
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1534
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1538
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 269:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1554
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1559
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1567
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1571
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1577
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1581
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1602
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1637
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1642
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1647
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1651
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1664
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1672
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1677
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1687
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1691
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1699
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1704
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1708
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1712
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1716
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1721
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String())}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1755
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1761
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1765
		{
			yyVAL.str = "extended "
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1771
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1775
		{
			yyVAL.str = "full "
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1781
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1785
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1795
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1805
		{
			yyVAL.showFilter = nil
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1819
		{
			yyVAL.showFilter = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1823
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1833
		{
			yyVAL.str = SessionStr
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = GlobalStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1843
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.statement = &Begin{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1857
		{
			yyVAL.statement = &Begin{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1863
		{
			yyVAL.statement = &Commit{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Rollback{}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1873
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1878
		{
			yyVAL.empty = struct{}{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1880
		{
			yyVAL.empty = struct{}{}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1883
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1890
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1896
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1901
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1905
		{
			yyVAL.str = JSONStr
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1909
		{
			yyVAL.str = TreeStr
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1913
		{
			yyVAL.str = VitessStr
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1917
		{
			yyVAL.str = TraditionalStr
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.str = AnalyzeStr
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1935
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1941
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1945
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1958
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1962
		{
			yyVAL.str = ""
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1966
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1972
		{
			yyVAL.statement = &OtherRead{}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1976
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1982
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1986
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1990
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2000
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			setAllowComments(yylex, true)
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2014
		{
			yyVAL.bytes2 = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2018
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2024
		{
			yyVAL.str = UnionStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.str = UnionAllStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = UnionDistinctStr
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2037
		{
			yyVAL.str = ""
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2041
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2045
		{
			yyVAL.str = SQLCacheStr
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			yyVAL.str = ""
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2054
		{
			yyVAL.str = DistinctStr
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2058
		{
			yyVAL.str = DistinctStr
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2063
		{
			yyVAL.selectExprs = nil
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.strs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2080
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2084
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2088
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2094
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = SQLCacheStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = DistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = DistinctStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = StraightJoinHint
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2124
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2130
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2134
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2142
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2147
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2151
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2155
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2167
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2171
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2177
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2181
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2191
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2195
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2205
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2215
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2221
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2225
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2231
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2235
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2248
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2252
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2256
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2266
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2268
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2272
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2274
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2278
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2280
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2283
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2285
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2288
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2292
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2296
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2309
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2313
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2317
		{
			yyVAL.str = JoinStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2323
		{
			yyVAL.str = StraightJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2329
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2333
		{
			yyVAL.str = LeftJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2337
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2341
		{
			yyVAL.str = RightJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2347
		{
			yyVAL.str = NaturalJoinStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2361
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2365
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2371
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2375
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2381
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2386
		{
			yyVAL.indexHints = nil
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2390
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2394
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2398
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2402
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2407
		{
			yyVAL.expr = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2411
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2451
		{
			yyVAL.str = ""
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2461
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2465
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2513
		{
			yyVAL.str = IsNullStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			yyVAL.str = IsNotNullStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2521
		{
			yyVAL.str = IsTrueStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.str = IsNotTrueStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2529
		{
			yyVAL.str = IsFalseStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.str = IsNotFalseStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2539
		{
			yyVAL.str = EqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = LessThanStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = GreaterThanStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.str = LessEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2555
		{
			yyVAL.str = GreaterEqualStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.str = NotEqualStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2563
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = nil
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2578
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2582
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2586
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2592
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2598
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2602
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2612
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2628
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2636
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2708
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2716
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2738
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2794
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 541:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2818
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2854
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2888
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 564:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2930
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2942
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2950
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2956
		{
			yyVAL.str = ""
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2960
		{
			yyVAL.str = BooleanModeStr
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2964
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2968
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2972
		{
			yyVAL.str = QueryExpansionStr
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2978
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2982
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2992
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2996
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3043
		{
			yyVAL.expr = nil
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3047
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3052
		{
			yyVAL.str = string("")
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3056
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3062
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3066
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3072
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3077
		{
			yyVAL.expr = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3081
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3087
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3091
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3095
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3105
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3113
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3117
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3121
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3125
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.expr = &NullVal{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3144
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3153
		{
			yyVAL.exprs = nil
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3157
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3162
		{
			yyVAL.expr = nil
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3171
		{
			yyVAL.orderBy = nil
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3175
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3185
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3191
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3196
		{
			yyVAL.str = AscScr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3200
		{
			yyVAL.str = AscScr
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3204
		{
			yyVAL.str = DescScr
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.limit = nil
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3217
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3221
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3226
		{
			yyVAL.str = ""
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3230
		{
			yyVAL.str = ForUpdateStr
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3234
		{
			yyVAL.str = ShareModeStr
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3247
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3255
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3259
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3269
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3273
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 644:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3277
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3282
		{
			yyVAL.updateExprs = nil
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3286
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3296
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3302
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3306
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3312
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3318
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3328
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3332
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3338
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3344
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3348
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3353
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3359
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3363
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3371
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3378
		{
			yyVAL.bytes = []byte("charset")
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3385
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3389
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3393
		{
			yyVAL.expr = &Default{}
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3402
		{
			yyVAL.byt = 0
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3404
		{
			yyVAL.byt = 1
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3407
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3412
		{
			yyVAL.str = ""
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3414
		{
			yyVAL.str = IgnoreStr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3418
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3422
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3426
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3428
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3432
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3434
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3452
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3456
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3459
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3461
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3482
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3486
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3817
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3826
		{
			decNesting(yylex)
		}
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3831
		{
			skipToEnd(yylex)
		}
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3836
		{
			skipToEnd(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3840
		{
			skipToEnd(yylex)
		}
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3844
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
