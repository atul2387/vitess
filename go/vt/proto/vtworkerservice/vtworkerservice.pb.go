//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// RPC interface for vtworker.
// The interface is very similar to the vtctld interface (see vtctlservice.proto).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: vtworkerservice.proto

package vtworkerservice

import (
	context "context"
	reflect "reflect"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	vtworkerdata "vitess.io/vitess/go/vt/proto/vtworkerdata"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_vtworkerservice_proto protoreflect.FileDescriptor

var file_vtworkerservice_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x12, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x83, 0x01, 0x0a,
	0x08, 0x56, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x16, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x56, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x2b, 0x2e, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x56, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2e, 0x69, 0x6f, 0x2f,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_vtworkerservice_proto_goTypes = []interface{}{
	(*vtworkerdata.ExecuteVtworkerCommandRequest)(nil),  // 0: vtworkerdata.ExecuteVtworkerCommandRequest
	(*vtworkerdata.ExecuteVtworkerCommandResponse)(nil), // 1: vtworkerdata.ExecuteVtworkerCommandResponse
}
var file_vtworkerservice_proto_depIdxs = []int32{
	0, // 0: vtworkerservice.Vtworker.ExecuteVtworkerCommand:input_type -> vtworkerdata.ExecuteVtworkerCommandRequest
	1, // 1: vtworkerservice.Vtworker.ExecuteVtworkerCommand:output_type -> vtworkerdata.ExecuteVtworkerCommandResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_vtworkerservice_proto_init() }
func file_vtworkerservice_proto_init() {
	if File_vtworkerservice_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vtworkerservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vtworkerservice_proto_goTypes,
		DependencyIndexes: file_vtworkerservice_proto_depIdxs,
	}.Build()
	File_vtworkerservice_proto = out.File
	file_vtworkerservice_proto_rawDesc = nil
	file_vtworkerservice_proto_goTypes = nil
	file_vtworkerservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VtworkerClient is the client API for Vtworker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VtworkerClient interface {
	// ExecuteVtworkerCommand allows to run a vtworker command by specifying the
	// same arguments as on the command line.
	ExecuteVtworkerCommand(ctx context.Context, in *vtworkerdata.ExecuteVtworkerCommandRequest, opts ...grpc.CallOption) (Vtworker_ExecuteVtworkerCommandClient, error)
}

type vtworkerClient struct {
	cc grpc.ClientConnInterface
}

func NewVtworkerClient(cc grpc.ClientConnInterface) VtworkerClient {
	return &vtworkerClient{cc}
}

func (c *vtworkerClient) ExecuteVtworkerCommand(ctx context.Context, in *vtworkerdata.ExecuteVtworkerCommandRequest, opts ...grpc.CallOption) (Vtworker_ExecuteVtworkerCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Vtworker_serviceDesc.Streams[0], "/vtworkerservice.Vtworker/ExecuteVtworkerCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &vtworkerExecuteVtworkerCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vtworker_ExecuteVtworkerCommandClient interface {
	Recv() (*vtworkerdata.ExecuteVtworkerCommandResponse, error)
	grpc.ClientStream
}

type vtworkerExecuteVtworkerCommandClient struct {
	grpc.ClientStream
}

func (x *vtworkerExecuteVtworkerCommandClient) Recv() (*vtworkerdata.ExecuteVtworkerCommandResponse, error) {
	m := new(vtworkerdata.ExecuteVtworkerCommandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VtworkerServer is the server API for Vtworker service.
type VtworkerServer interface {
	// ExecuteVtworkerCommand allows to run a vtworker command by specifying the
	// same arguments as on the command line.
	ExecuteVtworkerCommand(*vtworkerdata.ExecuteVtworkerCommandRequest, Vtworker_ExecuteVtworkerCommandServer) error
}

// UnimplementedVtworkerServer can be embedded to have forward compatible implementations.
type UnimplementedVtworkerServer struct {
}

func (*UnimplementedVtworkerServer) ExecuteVtworkerCommand(*vtworkerdata.ExecuteVtworkerCommandRequest, Vtworker_ExecuteVtworkerCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteVtworkerCommand not implemented")
}

func RegisterVtworkerServer(s *grpc.Server, srv VtworkerServer) {
	s.RegisterService(&_Vtworker_serviceDesc, srv)
}

func _Vtworker_ExecuteVtworkerCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(vtworkerdata.ExecuteVtworkerCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VtworkerServer).ExecuteVtworkerCommand(m, &vtworkerExecuteVtworkerCommandServer{stream})
}

type Vtworker_ExecuteVtworkerCommandServer interface {
	Send(*vtworkerdata.ExecuteVtworkerCommandResponse) error
	grpc.ServerStream
}

type vtworkerExecuteVtworkerCommandServer struct {
	grpc.ServerStream
}

func (x *vtworkerExecuteVtworkerCommandServer) Send(m *vtworkerdata.ExecuteVtworkerCommandResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Vtworker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vtworkerservice.Vtworker",
	HandlerType: (*VtworkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteVtworkerCommand",
			Handler:       _Vtworker_ExecuteVtworkerCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vtworkerservice.proto",
}
